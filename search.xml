<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>iwantit</title>
      <link href="/2024/11/15/iwantit/"/>
      <url>/2024/11/15/iwantit/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>new_start</title>
      <link href="/2024/11/11/new-start/"/>
      <url>/2024/11/11/new-start/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【FPGA】论文调研——Evaluating Fast Algorithm for CNNs and FPGAs</title>
      <link href="/2023/04/04/%E3%80%90FPGA%E3%80%91%E8%AE%BA%E6%96%87%E8%B0%83%E7%A0%94%E2%80%94%E2%80%94Evaluating-Fast-Algorithm-for-CNNs-and-FPGAs/"/>
      <url>/2023/04/04/%E3%80%90FPGA%E3%80%91%E8%AE%BA%E6%96%87%E8%B0%83%E7%A0%94%E2%80%94%E2%80%94Evaluating-Fast-Algorithm-for-CNNs-and-FPGAs/</url>
      
        <content type="html"><![CDATA[<p><strong>摘要</strong></p><p>近年来，卷积神经网络(CNN)已被广泛应用于计算机视觉领域。FPGA由于其高性能和可重构性，已被充分开发为较有前途的CNN硬件加速器。然而，先前基于传统卷积算法的FPGA实现方案往往受到FPGA计算能力的限制，例如DSP的数量。</p><p>首先，为了解决这一问题，本文研究的论文《Evaluating Fast Algorithm for Convolutional Neural Networks on FPGAs》采用快速算法将特征映射转换为特定域，降低了算法复杂度，减少了DSP的使用数量，提升了FPGA的资源利用率。Winograd和快速傅里叶变换(FFT)作为快速算法的代表，首先将输入数据转换并滤波，然后逐元乘法，再进行逆变换得到最终输出。</p><p>其次，调研的论文中还提出了一种在FPGA上实现快速算法的新架构。该设计采用了行缓冲结构，可以有效地重用不同块之间的特征图数据。该论文还有效地对Winograd&#x2F;FFT处理元素(PE)单元进行流水线化，并通过并行化启动多个PE。</p><p>最后，论文提出了一个分析模型来预测资源的使用和性能，并使用了最先进的CNN实验测出了FPGA的最佳性能和能源效率。在Xilinx ZCU102平台上，使用Winograd实现了AlexNet和VGG16的854.6 GOP&#x2F;s和2479.6 GOP&#x2F;s。在Xilinx ZC706平台上，使用Winograd实现了Resnet的130.4 GOP&#x2F;s，使用FFT实现了YOLO的2011 GOP&#x2F;s。</p><p><strong>关键词：CNN、FPGA、快速算法、新架构、行缓冲、PE、流水化、并行化、分析模型</strong></p><p>目录</p><p><a href="#_toc27927">1. 前言4</a></p><p><a href="#_toc92">2. 背景知识5</a></p><p><a href="#_toc3393">2.1 CNN介绍5</a></p><p><a href="#_toc9186">2.2 适用于CNNs的快速算法6</a></p><p><a href="#_toc13250">2.2.1 基于Winograd算法的卷积运算7</a></p><p><a href="#_toc9674">2.2.2 基于FFT算法的卷积运算8</a></p><p><a href="#_toc21482">2.2.3 Winograd和FFT算法的比较9</a></p><p><a href="#_toc16727">3. 数据处理过程10</a></p><p><a href="#_toc17496">4. 主要架构设计11</a></p><p><a href="#_toc361">4.1 架构整体概览12</a></p><p><a href="#_toc16424">4.2 行缓冲区的设计12</a></p><p><a href="#_toc2433">4.3 循环分块技术13</a></p><p><a href="#_toc9827">4.3.1 循环分块(Loop Tiling)的概念介绍13</a></p><p><a href="#_toc2027">4.3.2 论文中循环分块技术的应用14</a></p><p><a href="#_toc4605">5. PE单元设计14</a></p><p><a href="#_toc8756">5.1 基于Winograd算法的PE设计14</a></p><p><a href="#_toc30459">5.2 基于FFT算法的PE设计15</a></p><p><a href="#_toc30293">5.3 PE并行化与本地内存优化15</a></p><p><a href="#_toc5479">5.3.1 利用循环展开(Loop Unrolling)实现PE的并行化15</a></p><p><a href="#_toc24127">5.3.2 本地内存优化(Local Memory Promotion)16</a></p><p><a href="#_toc22844">6. 评估资源和性能的模型16</a></p><p><a href="#_toc20646">6.1 对于资源评估的建模16</a></p><p><a href="#_toc13946">6.2 对于性能评估的建模17</a></p><p><a href="#_toc20793">7. 自动化设计链18</a></p><p><a href="#_toc19191">8. 实验评估测试19</a></p><p><a href="#_toc13241">8.1 实验设置19</a></p><p><a href="#_toc7089">8.2 Winograd算法的性能分析19</a></p><p><a href="#_toc20606">8.3 FFT算法的性能分析20</a></p><p><a href="#_toc12712">8.4 资源的评估验证20</a></p><p><a href="#_toc32364">8.5 具体情况的研究21</a></p><p><a href="#_toc14982">8.5.1 AlexNet21</a></p><p><a href="#_toc1396">8.5.2 VGGNet22</a></p><p><a href="#_toc13224">8.5.3 YOLO23</a></p><p><a href="#_toc5634">8.5.4 Resnet24</a></p><p><a href="#_toc6720">8.6 与GPU的比较24</a></p><p><a href="#_toc29971">9. 总结25</a></p><p><a href="#_toc12708">参考文献25</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><a name="_toc27927"></a><strong>1. 前言</strong></h1><p>深度卷积神经网络(CNN)在图像分类、目标检测、语义分割等各种计算机视觉任务中都取得了显著的性能。CNN性能的改进是以巨大的计算复杂度为代价的，因为它需要对特征图中的所有区域进行全面评估和计算。面对如此巨大的计算压力，硬件加速器，如GPU (graphics processing unit)、FPGA (field-programmable gate arrays)、ASIC (application specific integrated circuit)等已被应用于对CNN进行加速。在加速器中，FPGA因其高性能、和可重构性而成为一种较好的解决方案。更重要的是，使用C或C++的高层次综合(HLS)大大降低了FPGA的编程障碍，提高了效率。</p><p>CNN通常涉及多层，其中一层的输出特征图是下一层的输入特征图。先前的研究表明，最先进的CNN的计算是由卷积层主导的。如果使用空间卷积算法，输出特征图中的每个元素将通过使用多次乘累加(MAC)操作单独计算。而此前使用该算法的CNN FPGA解决方案已经初步成功。在所调研的论文《Evaluating Fast Algorithm for Convolutional Neural Networks on FPGAs》中显示了FPGA加速器加速CNN的资源利用情况，如表一所示。在这些设计中，可以得出结论，DSP是消耗最多的资源，因为典型CNN的操作主要由MAC单元组成，乘法器通常由DSP在FPGA上实现。</p><p><strong>表1 先前FPGA加速CNN的资源使用情况:</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.002.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.002"></p><p>除了空间卷积算法外，一些设计选择将卷积变为通用矩阵乘法(GEMM)。然而，这种方法只是减少了访问内存的次数，并没有减少乘法的数量。基于减少乘法次数可以提高DSP效率的做法，快速算法被广泛应用于降低卷积运算的算术复杂度。实践证明，Winograd快速算法和经典的FFT算法可以显著降低算法复杂度。在应用FFT和Winograd算法时，将输入特征映射和滤波器转换到相应的域，然后执行元素矩阵乘法(element-wise matrix-乘法，EWMM)。约简程度取决于快速算法的参数。例如，使用6 × 6输入块的Winograd算法可以为3 × 3滤波器带来4倍的乘法缩减，使用8 × 8输入块的FFT算法可以为3 × 3滤波器带来3.45倍的乘法缩减。</p><p>更重要的是，目前CNN的趋势是使用更小的滤波器。例如论文中提到的VGG16和YOLO只使用3×3滤波器，而3×3和5×5过滤器广泛应用于Resnet和Googlenet。并且已经证明了快速Winograd算法和FFT可以用来实现具有较小滤波器的CNN。这为使用快速算法高效实现CNN提供了机会。然而，在FPGA上使用快速算法很有吸引力，但仍然存在几个问题。首先，设计不仅要最小化内存带宽需求，而且要使内存吞吐量与计算匹配，这是至关重要的。其次，将快速算法映射到FPGA上存在较大的设计空间。很难推断出哪些设计将提高或损害性能。</p><p>本文所调研的论文《Evaluating Fast Algorithm for Convolutional Neural Networks on FPGAs》做出了以下贡献：</p><ul><li>提出了在FPGA上使用Winograd和FFT算法高效实现CNN的框架。</li><li>提出了采用行缓冲结构、高效的全流水线PE和并行化PE的架构。</li><li>开发分析资源和性能的模型，并利用这些模型探索设计空间，以确定最优参数。该模型集成了自动工具链，可以自动生成快速算法的实现。</li></ul><p>论文中也通过实验得到了一些令人信服的结果：使用了最先进的CNN的实验测得了fpga上CNN的最佳性能和能源效率。论文中的团队在ZCU102平台上实现了卷积层的平均1006.4  GOP&#x2F;s和2601.3 GOP&#x2F;s，整体AlexNet和VGG的平均854.6 GOP&#x2F;s和2479.6 GOP&#x2F;s。 AlexNet的能源效率为36.2 GOP&#x2F;s&#x2F;W, VGG16的能源效率为105.4 GOP&#x2F;s&#x2F;W。在ZC706平台上，卷积层的平均GOP&#x2F;s分别为163.1 GOP&#x2F;s和2011 GOP&#x2F;s，整体Resnet和YOLO的平均GOP&#x2F;s分别为130.4和2011 GOP&#x2F;s。Resnet的能源效率为13.8 GOP&#x2F;s&#x2F;W，YOLO的能源效率为21.4 GOP&#x2F;s&#x2F;W。</p><ol start="2"><li><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a><a name="_toc92"></a><strong>背景知识</strong></h1><ol><li><h2 id="CNN介绍"><a href="#CNN介绍" class="headerlink" title="CNN介绍"></a><a name="_toc105073162"></a><a name="_toc3393"></a><strong>CNN介绍</strong></h2><p><strong>图1：深度学习的整体框架:</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.003.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.003"></p></li></ol></li></ol><p>深度学习的整体过程如图1所示，首先需要初始化一些参数，通过摄取外部的相关信息进行前向传播计算，之后会计算损失函数，并通过反向传播来修正优化参数，已达到更为准确的预测。CNN是深度学习中的一类前馈人工神经网络，用于前向传播的过程。一般来说，CNN由一系列层组成，每一层又由输入特征图、过滤器和输出特征图组成。可以使用在训练过程中学习到特征的滤波器从输入图像中提取某些特征，如图2所示。在典型CNN的所有层中，卷积层占了主要的计算量。</p><p><strong>图2：CNN每一层的计算过程:</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.004.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.004"></p><p>CNN中的空间卷积算法由多个for循环组成，如下式所示:</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.005.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.005"></p><p>将相应的输入特征数据与滤波器进行相乘和累加，分别计算输出特征图中的每个元素。通过平面化输入特征映射和重新排列滤波器，空间卷积可以映射到GEMM (General Matrix Multiplication）。这种方法会增加对局部内存的要求，因为输入特征图中的像素在循环展开过程中会被复制多次。GEMM因其对不同层类型的通用性而被广泛应用于GPU实现中。然而，GEMM在CNN的实现中没有贡献算术简化，但GEMM的优化可以减少内存访问次数，提高速度。</p><ol><li><h2 id="适用于CNNs的快速算法"><a href="#适用于CNNs的快速算法" class="headerlink" title="适用于CNNs的快速算法"></a><a name="_toc9186"></a><strong>适用于CNNs的快速算法</strong></h2>除了空间算法和GEMM外，Winograd和FFT等快速算法也被应用于卷积的加速。与空间卷积算法不同的是，该算法利用输入特征图中同一块元素之间的结构相似性，可以生成一个输出特征图块。更清楚地说，给定大小为n × n的输入块和r × r滤波器，论文使用快速算法生成大小为m × m (n &#x3D; m + r−1)的输出特征图。因此，基于这些快速算法的卷积可以用一个通用公式来描述：</li></ol><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.006.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.006"></p><p>从公式中可以看出快速卷积算法主要有三个步骤：</p><ul><li><p><strong>输入和滤波器的转换:</strong> 首先，将输入块和过滤器转换为相同的形状。Winograd卷积和FFT卷积使用不同的变换函数，后面会介绍。</p></li><li><p><strong>元素相乘(EWMM):</strong> 其次，在两种算法中，对得到的中间矩阵进行EWMM。微小的区别在于FFT卷积使用复杂的数据，因此需要更多的计算资源。</p></li><li><p><strong>逆变换:</strong> 最后，将EWMM结果变换为原始卷积结果。逆变换函数也根据第一阶段使用的函数的不同而不同。</p><ol><li><h3 id="基于Winograd算法的卷积运算"><a href="#基于Winograd算法的卷积运算" class="headerlink" title="基于Winograd算法的卷积运算"></a><a name="_toc13250"></a><strong>基于Winograd算法的卷积运算</strong></h3>Winograd描述了一种计算多项式乘法的技术，它等价于卷积运算。论文可以通过将滤波器与输入F(m, r)卷积来表示计算m个输出的结果。例如，F(2,3)的空间算法需要m × r (2 × 3 &#x3D; 6)次乘法，而Winograd算法用以下方式计算F(2,3)，只需要n &#x3D; m + r−1(4)次乘法，如下式所示：</li></ol></li></ul><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.007.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.007"></p><p>可以发现，Winograd算法将矩阵z和矩阵x的计算转变成了计算m1,m2,m3和m4，这四项的表达式如上式所示。其实矩阵x可以看作CNN当中的输入特征图的一部分数据，x矩阵可以看作做滤波器也就是卷积核，而与x有关的矩阵是确定的一些参数，可以预先计算好，因此计算m1,m2,m3和m4只需要四次乘法。减少乘法的次数可以减少DSP的使用数量，对提升FPGA的性能有较大的帮助，因此被称作为快速算法。 </p><p><strong>图3：实际二维卷积中的Winograd算法:</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.008.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.008"></p><p>在实际的CNN二维卷积操作过程中，首先将需要卷积的每一个特征图块展开到k矩阵的一行，如图3所示，将滤波器中的参数展开到w矩阵的一列，然后进行矩阵相乘。使用Winograd算法的过程可以由下式统一给出：</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.009.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.009"></p><ol><li><h3 id="基于FFT算法的卷积运算"><a href="#基于FFT算法的卷积运算" class="headerlink" title="基于FFT算法的卷积运算"></a><a name="_toc9674"></a><strong>基于FFT算法的卷积运算</strong></h3>FFT是Cooley - Turkey在1995年提出的，用于加快机器的计算速度，可以将常数复数乘法从O(N^2)减少到O(N log N)，且没有精度损失。计算方法如下:</li></ol><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.010.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.010"></p><p>在上式中，FFT是由小尺度离散傅里叶变换按照划分而来，也称为蝶形计算。值得注意的是，Cooley-Turkey算法仅在FFT大小为2的幂时有效。图4给出了FFT size &#x3D; 4的FFT算法简例。在本例中，完成FFT需要两个阶段。在这些阶段中，用两点(基数-2 FFT)进行了若干次蝶形计算。</p><p><strong>图4：基于蝶形运算的FFT算法：</strong></p><p><code>      </code><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.011.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.011"></p><p>FFT计算大小为2的幂，并且计算结果可能有复数。所以最后需要crop操作对数据进行修正，符合输出的是实数，并且位宽一致，如下式所示。</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.012.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.012"></p><ol><li><h3 id="Winograd和FFT算法的比较"><a href="#Winograd和FFT算法的比较" class="headerlink" title="Winograd和FFT算法的比较"></a><a name="_toc21482"></a><strong>Winograd和FFT算法的比较</strong></h3>表2对卷积算法进行了比较，结果表明Winograd算法和FFT算法可以有效地降低算法复杂度和变换开销。</li></ol><p><strong>表2：卷积算法的比较</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.013.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.013"></p><p>Winograd算法和FFT算法虽然流程有相似之处，但是依然有所不同。、</p><ul><li><strong>乘法节省：</strong></li></ul><p>在快速算法中，只有阶段2的元素相乘需要使用到乘法。对于Winograd算法，乘法的次数是n^2。例如，用3 × 3滤波器卷积6 × 6输入块生成的4 × 4输出块，空间卷积需要42 × 32 &#x3D; 144次乘法，而Winograd算法只需要6 × 6 &#x3D; 36次乘法。然而，FFT算法涉及复数。一般来说，一个复杂的乘法需要四次实乘法，如下式所示。</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.014.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.014"></p><p>此外，在深度学习场景中，输入通常为实值，这使得FFT变换后的矩阵具有Hermitian对称性。Hermitian Matrix指的是自共轭<a href="https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5/18069?fromModule=lemma_inlink">矩阵</a>。矩阵中每一个第i行第j列的元素都与第j行第i列的元素的共轭相等。矩阵<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%AF%B9%E8%A7%92%E7%BA%BF?fromModule=lemma_inlink">主对角线</a>上的元素都是实数的，其<a href="https://baike.baidu.com/item/%E7%89%B9%E5%BE%81%E5%80%BC?fromModule=lemma_inlink">特征值</a>也是实数，如图4所示。</p><p><strong>图5：Hermitian Matrix的共轭对称性：</strong> </p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.015.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.015"></p><p>在图5的例子中，可以观察到X(0)和X(2)，以及X(1)和X(3)表现出Hermitian对称。</p><p><strong>表3：两种快速算法在节省乘法运算方面的比较：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.016.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.016"></p><p>从图中可以看出，在相同的输入条件下，例如n&#x3D;8,r&#x3D;3,m&#x3D;6的条件下，Winograd比FFT节省的乘法次数更多。原因在于，FFT考虑了复数运算，运算出的矩阵呈现Hermitian对称，所以相当于一半的矩阵数据都是没用的，多用了一些乘法操作。</p><ul><li><strong>常数范围:</strong></li></ul><p>转换阶段的常数乘法可以用移位操作代替，移位操作可以在FPGA上使用查找表(LUT)实现。因此，常数的范围决定了精度要求。换句话说，常数越大或越小，需要的LUT就越多。论文比较了Winograd算法和FFT算法中的常数。在Winograd，常数是由多项式插值确定的。在FFT中，常数为旋转因子。在表3中，论文中列出了一些常用的块大小的常数，从中可以看出，在相同的输入块大小下，Winograd算法有更高的精度要求。</p><ol start="2"><li><h1 id="数据处理过程"><a href="#数据处理过程" class="headerlink" title="数据处理过程"></a><a name="_toc16727"></a><strong>数据处理过程</strong></h1>基于Winograd和基于FFT的卷积都使用块作为基本单位。在信号处理中，有两种常用的方法将特征图分割成块，如下所示：</li></ol><ul><li><p><strong>重叠相加法(Overlap -and- Add, OaA):</strong></p><ul><li>在这种方法中，输入被分割成几个没有重叠的块。然后，输出块进行重叠，并叠加在一起以得到最终结果，如图6(a)所示。</li></ul></li><li><p><strong>重叠保留法(Overlap-and-Save, OaS):</strong></p><ul><li><p>如图6(b)所示，在该方法中，来自重叠输入块的输出块进行拼接直接得到结果，不需要进行重叠。</p><p><strong>图6：重叠相加法和重叠保留法：</strong></p></li></ul></li></ul><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.017.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.017"></p><p>虽然这两种方法具有相同的算法复杂度，但在FPGA实现中，OaA方法会导致严重的内存冲突。如图6(a)所示，重叠部分共享相同的地址，当任务完全流水线时，MAC(乘累加)操作需要块随机存储器(BRAM)中至少两个端口。因此，论文中选择OaS方法作为数据流来解决数据依赖问题。</p><p>结合OaS方法，论文中将快速算法应用于输出块的生成。快速卷积算法的伪代码如图7所示。</p><p><strong>图7：快速卷积法的伪代码：</strong></p><p><code>       </code><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.018.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.018"></p><ol start="2"><li><h1 id="主要架构设计"><a href="#主要架构设计" class="headerlink" title="主要架构设计"></a><a name="_toc17496"></a><strong>主要架构设计</strong></h1><p>基于OaS，论文提出了一种基于Winograd和FFT卷积的CNN FPGA加速器设计。然而，也存在一些挑战。首先，卷积层具有较高的内存带宽要求。论文观察到相邻的块在水平和垂直上共享输入特征图数据。论文利用这一观察来设计行缓冲区，以最大化数据重用。其次，与空间卷积算法不同，快速算法一次生成一个输出特征图的块。这要求在转换开始之前，输入块和过滤器中的所有元素同时就绪。论文为Winograd算法和FFT算法设计了一个高效的PE单元，然后通过并行化多个PE来实现卷积的计算。第三，论文提出了一个性能预测的分析模型，并利用它来有效地进行探索。</p></li><li><h2 id="架构整体概览"><a href="#架构整体概览" class="headerlink" title="架构整体概览"></a><a name="_toc361"></a><strong>架构整体概览</strong></h2><p><strong>图8：整体架构概览：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.019.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.019"></p></li></ol><p>图8给出了FPGA上基于快速算法的卷积层架构概述。论文中采用行缓冲区来实现数据重用。图8中有多通道的输入特征映射(M) ，PE (Winograd PE或FFT PE)获取来自行缓冲区的数据。具体来说，给定一个n×n的输入块，PE将生成一个m×m的输出块。论文通过并行化多个通道来进行计算。最后论文使用双缓冲区来重叠数据传输和计算。所有输入数据(例如，输入特征映射和过滤器)最初存储在外部存储器中。输入和输出特征映射通过先输入先输出(FIFO)传输到FPGA。然而，随着卷积网络的深入，过滤器的大小显著增加。将所有滤波器加载到片上存储器中是不现实的。在论文的设计中，将输入和输出通道分成几组。每个组只包含过滤器的一部分，在需要时逐组加载过滤器。</p><ol><li><h2 id="行缓冲区的设计"><a href="#行缓冲区的设计" class="headerlink" title="行缓冲区的设计"></a><a name="_toc16424"></a><strong>行缓冲区的设计</strong></h2>如图8所示，输入的行缓冲区采用双缓冲区的设计，实现n行的卷积计算和m行的数据传输。论文将上方用于m行数据传输的缓冲区记作A缓冲区，将下方实现n行卷积计算的缓冲区记作B缓冲区。由于论文中使用的是重叠保留法计算卷积，因此在每一次的输入块（图7中的Input Tile）进行运算的时候，前一个输入块和这一轮的输入块应该有一部数据是重叠的，也就是数据重用的部分，如果这些数据在每一轮卷积中都从内从中读取出来然后再放进内存，那么对内存的访问次数将会很多，降低运算的速度。</li></ol><p>图8输入缓冲区中下方B缓冲区的数据移动模式可以确保重叠部分的数据在缓冲区多待一轮，不会重复的从内存中取出放回，提高了运算速度。首先一开始，PE直接读取下方B缓冲区的n行数据进行运算，之后由于n行中的下面2行属于重叠部分，在第二次运算过程中还会用到，所以将最下面2行的数据移动到B缓冲区的最上面两行，n行下面的m行被A缓冲区新来的数据覆盖。实现了重叠保留法的具体操作，同时减少了内存的访问次数。</p><ol><li><h2 id="循环分块技术"><a href="#循环分块技术" class="headerlink" title="循环分块技术"></a><a name="_toc2433"></a><strong>循环分块技术</strong></h2><ol><li><h3 id="循环分块-Loop-Tiling-的概念介绍"><a href="#循环分块-Loop-Tiling-的概念介绍" class="headerlink" title="循环分块(Loop Tiling)的概念介绍"></a><a name="_toc9827"></a><strong>循环分块(Loop Tiling)的概念介绍</strong></h3><p><strong>图9：简单的双循环访问数组的代码：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.020.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.020">****</p></li></ol></li></ol><p>论文知道，对于循环访问数组如而言，如图9所示，无论是 CPU 还是 GPU在每次访问 A[i] 的时候，并不是只从 memory 取一个 float，而是以 Cache Line（约 64Byte）为单位去访问的。这样的话，当访问 A[0] 时，其实从 A[0] 到 A[15] 都已经在同一个 CacheLine 里，所以 i&#x3D;1 到 i&#x3D;15 时的访存速度会更快。</p><p>但问题在于 Cache 的总容量是有限制的（如 现代 CPU 的 L1 Data Cache 约 32KB 大小），当 Cache 满了之后，如果还需要获取新的 Cache Line，就得把旧的 Cache Line 给退还到 memory 中。</p><p>所以，上述例子中，如果 N 非常大，那么当你访问到 N-1 的时候，A[0-15] 所在的 Cache Line 已经被退还到memory中了。这时如果再回头访问 A[0]，就得重新把这个 Cache Line 从 memory 中取出，速度比较慢。如同上面的这个双层循环的例子，如果 M 很大，那么每次 i 加一 时，就得重新从 memory 访问，访存速度就会很慢。 因此，论文引入循环分块技术Loop Tiling 去解决上述问题。</p><p>Loop Tiling 的目的是确保一个 Cache Line 在被用过以后，后面再用的时候其仍然在 cache 中，没有被退还。实现思路是：当一个数组总的数据量无法适合缓存的大小时，把总数据分成一个个块去访问，令每个块都可以适合内存的大小。</p><p><strong>图10：利用循环分块的访问数组代码：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.021.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.021"></p><p>具体做法如图9所示。把一层内层循环分成 outer loop * inner loop。然后把 outer loop 移到更外层去，从而确保 inner loop 一定能适合缓存的大小。当论文把内层循环给变成更小的 inner loop，那么整个待访问数组适合缓存的大小，外层开始循环时就不会出现 cache miss 了。</p><ol><li><h3 id="论文中循环分块技术的应用"><a href="#论文中循环分块技术的应用" class="headerlink" title="论文中循环分块技术的应用"></a><a name="_toc2027"></a><strong>论文中循环分块技术的应用</strong></h3><p><strong>图11：论文中循环分块技术的应用：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.022.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.022">****</p></li></ol><p>论文中将计算卷积的最内层的两层循环利用循环分块技术进行处理，其中将输入特征图按Pm进行分块，输出特征图按Pn进行分块，进行实际的卷积运算，如图11所示。</p><ol start="2"><li><h1 id="PE单元设计"><a href="#PE单元设计" class="headerlink" title="PE单元设计"></a><a name="_toc4605"></a><strong>PE单元设计</strong></h1><p><strong>图12：PE单元的整体设计：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.023.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.023"></p></li><li><h2 id="基于Winograd算法的PE设计"><a href="#基于Winograd算法的PE设计" class="headerlink" title="基于Winograd算法的PE设计"></a><a name="_toc8756"></a><strong>基于Winograd算法的PE设计</strong></h2><p>在Winograd PE设计中，论文选择了在线的转换过滤器。这样不仅节省了片上的BRAM资源，而且由于输入和滤波器的转换可以并行进行，不会造成额外的延迟。观察到变换矩阵(B, G，A)只要输入块大小和滤波器大小给定就可以确定，<strong>论文变将换阶段的乘法替换为常数乘法，这些常数乘法是使用移位操作计算的。使用LUT阵列可以很容易地实现移位操作，因此可以降低DSP的利用率。</strong>阶段2中的乘法是并行执行的，因此论文将中间数据矩阵存储在寄存器中，以提高内存带宽，因为它减轻了内存冲突。</p></li><li><h2 id="基于FFT算法的PE设计"><a href="#基于FFT算法的PE设计" class="headerlink" title="基于FFT算法的PE设计"></a><a name="_toc30459"></a><strong>基于FFT算法的PE设计</strong></h2><p>传统的FFT实现主要关注的是较大数据量的计算，其中可能包含数千个信号。在这些情况下，由于资源限制，FFT计算不能完全并行。而在CNN的计算中，过滤器的大小相对较小，特征图的大小也会随着CNN网络的深入而减小。因此，应用小尺度FFT算法是合理的。论文将PE专门用于实现FFT的卷积。在变换阶段，为了执行2-D-FFT，论文首先对输入块的每一行进行1-D-FFT，然后对中间矩阵进行转置，为下一行的1-D-FFT做准备，然后再进行一次换位，得到正确的FFT结果。请注意，阶段1和3中的乘法也是常数乘法，因此不需要任何DSP。此外，论文利用输入和滤波器的矩阵共轭对称来减少乘法次数和内存需求，如图12所示。与Winograd PE类似，中间矩阵存储在寄存器中，常数乘法被移位操作取代。</p></li><li><h2 id="PE并行化与本地内存优化"><a href="#PE并行化与本地内存优化" class="headerlink" title="PE并行化与本地内存优化"></a><a name="_toc30293"></a><strong>PE并行化与本地内存优化</strong></h2><ol><li><h3 id="利用循环展开-Loop-Unrolling-实现PE的并行化"><a href="#利用循环展开-Loop-Unrolling-实现PE的并行化" class="headerlink" title="利用循环展开(Loop Unrolling)实现PE的并行化"></a><a name="_toc5479"></a><strong>利用循环展开(Loop Unrolling)实现PE的并行化</strong></h3><p>环路展开技术可以提高FPGA器件中海量计算资源的利用率。沿着不同的循环维度展开将产生不同的实现变量。</p><p><strong>图13：简单的循环展开实例：</strong></p></li></ol></li></ol><p><code>  </code><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.024.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.024"><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.025.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.025"></p><p>图13左侧是一个简单的循环代码，可以发现变量i需要循环100次来完成累加操作，通过循环展开实现的代码如图右边所示。可以发现，此时循环块中的累加需要同时执行两次，而变量i只需循环50次。对于硬件电路而言，就是一种增加电路面积而减少运行时间的做法，而这对于FPGA是有利的，因为可以提升FPGA中LUT的资源利用率，同时减少运算时间。</p><p>如图所示，论文通过实现内层循环的展开来实现PE的并行化。在并行计算中，交换循环的顺序，如图所示，以避免数据重复。值得注意的是，Pm×Pn的PEs只需要输入转换Pm次，因此论文将Pm设置为计算中的最外循环。类似地，逆变换只需要执行Pn次。所以论文中不立即进行逆变换。EWMM操作的结果在所有输入通道上累积，然后将累积的结果转换到空间域。</p><ol><li><h3 id="本地内存优化-Local-Memory-Promotion"><a href="#本地内存优化-Local-Memory-Promotion" class="headerlink" title="本地内存优化(Local Memory Promotion)"></a><a name="_toc24127"></a><strong>本地内存优化(Local Memory Promotion)</strong></h3><p>如果通信部分的最内层循环，例如图12中的循环维度ti与数组无关，则不同循环迭代之间将存在冗余内存操作。本地内存提升可以减少冗余操作。在图14中，最内层的循环维度ti与数组输出fm无关。因此，对数组输出fm的访问可以提升到外部循环。注意，提升过程可以迭代执行，直到围绕访问的最内层循环最终相关为止。通过局部内存提升，可以减少内存访问速度，提升速度。</p><p><strong>图14：本地内存优化：</strong></p></li></ol><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.026.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.026"></p><ol start="2"><li><h1 id="评估资源和性能的模型"><a href="#评估资源和性能的模型" class="headerlink" title="评估资源和性能的模型"></a><a name="_toc22844"></a><strong>评估资源和性能的模型</strong></h1><ol><li><h2 id="对于资源评估的建模"><a href="#对于资源评估的建模" class="headerlink" title="对于资源评估的建模"></a><a name="_toc20646"></a><strong>对于资源评估的建模</strong></h2><p><strong>图15：使用DSP数量的计算建模：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.027.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.027"></p></li></ol></li></ol><p>图15是论文对使用DSP数量的建模，可以发现Winograd算法相比于FFT算法使用的DSP要更少，这与之前的结论是吻合的，因为FFT还要考虑复数的相乘，一次复数相乘需要四次实数乘法，同时输出结果矩阵具有共轭对称特性，浪费了一半运算数据。</p><p><strong>图16：使用LUT数量的计算建模：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.028.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.028"></p><p><strong>图17：使用存储区域个数的计算建模：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.029.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.029"></p><p>此外，论文还对使用的LUT和存储区域个数进行了计算建模，如图16和图17所示。其中的参数都可以由计算得出。</p><ol><li><h2 id="对于性能评估的建模"><a href="#对于性能评估的建模" class="headerlink" title="对于性能评估的建模"></a><a name="_toc13946"></a><strong>对于性能评估的建模</strong></h2>为了有效地利用资源，数据传输速度必须大于或等于计算速度。论文对行缓冲区中处理n行输入数据的时间建模如下：</li></ol><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.030.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.030"></p><p>其中，Freq为FPGA的工作频率。II表示流水线的迭代间隔。在论文的实现中，循环是完全流水线化的，因此II &#x3D; 1。Pdepth为管道深度，当循环次数足够大时可以忽略。</p><p>另一方面，对应的输入输出数据的传输时间为:</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.031.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.031"></p><p>由于要求Ttransfer≤Tcompute，所以带宽需求可以表述为:</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.032.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.032"></p><p>此外，论文还考虑了Tinit，将输入图像的前n行加载到片上内存并进行滤波的时间：</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.033.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.033"></p><p>卷积的总运算处理时间是：</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.034.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.034"></p><p>总的操作次数是：</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.035.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.035"></p><p>因此，基于快速算法的卷积的有效性能计算如下：</p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.036.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.036"></p><ol start="2"><li><h1 id="自动化设计链"><a href="#自动化设计链" class="headerlink" title="自动化设计链"></a><a name="_toc20793"></a><strong>自动化设计链</strong></h1><p><strong>图18：自动化设计链示意图：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.037.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.037.png"></p></li></ol><p>论文提出了一种将CNN模型映射到FPGA实现的自动工具链。OaS方法同时适用于Winograd算法和FFT算法，激发了统一的数据位置感知体系结构设计。显然，Winograd PE和FFT PE都从行缓冲区中获取数据，并逐块生成输出。因此，将一种算法转换为另一种算法只需要重新配置PE，而不需要对架构进行任何其他更改。为了优化设计，论文中用设计的参数来制定性能和资源利用率，然后依靠这个模型来指导设计空间探索。通过给定的快速算法(Winograd或FFT)，自动工具可以自动将CNN映射到FPGA上，如图18所示。流程由四个步骤组成。在第一步中，将CNN体系结构和FPGA配置输入到设计空间探索引擎(DSEE)中，以获得最优解。在第二步中，基于最优解，开发了自动生成快速卷积函数的代码生成引擎(CGE)。在第3步中，使用Xilinx HLS工具将代码合成为RTL级别。最后，使用Xilinx SDSoC(软件定义的片上系统)工具链来生成比特流。</p><ol start="2"><li><h1 id="实验评估测试"><a href="#实验评估测试" class="headerlink" title="实验评估测试"></a><a name="_toc19191"></a><strong>实验评估测试</strong></h1><ol><li><h2 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a><a name="_toc13241"></a><strong>实验设置</strong></h2>论文在两个FPGA平台上评估技术:1)Xilinx ZC706和2)ZCU102。Xilinx ZC706平台由Kintex-7 FPGA和双ARM Cortex-A9处理器组成。外部内存为1gb DDR3。论文的FPGA实现在这个平台上以166 mHz的频率工作。Xilinx ZCU102由UltraScale FPGA，ARM Cortex-A53处理器，500 mb DDR3组成。论文的FPGA实现在这个平台上以200mHz频率运行。为了测量运行时功率，论文在FPGA平台上插入了一个功率计。</li></ol></li><li><h2 id="Winograd算法的性能分析"><a href="#Winograd算法的性能分析" class="headerlink" title="Winograd算法的性能分析"></a><a name="_toc7089"></a><strong>Winograd算法的性能分析</strong></h2><p>论文将评估分析模型，并使用单个卷积层分析Winograd算法的资源使用情况。论文使用典型的输入特征图尺寸:224(H) × 224(W)， {M &#x3D; N &#x3D; Tn &#x3D; Tm &#x3D; 64}，并尝试两种不同的滤波器尺寸:3 × 3和5 × 5。图17比较了不同输入块大小和并行度下的预测性能和实际性能，并给出了相应的资源利用率。实验在Xilinx ZC706上进行。可以看到论文中的性能预测模型是非常准确的。滤波器3 × 3和5 × 5的平均预测误差分别为15.4%和13.7%。不准确的来源可能是实际带宽和峰值带宽以及DDR访问延迟的差异。</p><p><strong>图19：Winograd算法的性能分析：</strong></p></li></ol><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.038.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.038"></p><p><strong>通过Winograd算法，DSP不再是大多数情况下的限制资源，如图19所示。相反，Bram和内存带宽可能是限制资源的主要因素。</strong>BRAMs的消耗来自几个方面。首先，与空间卷积不同，Winograd卷积需要更多的缓冲区，因为行缓冲区结构。其次，并行Winograd PEs需要内存分区来维持片上内存带宽。最后，当计算效率提高时，片外带宽可能会成为瓶颈。总体而言，Winograd算法节省了DSP，提高了整体资源利用率。</p><ol><li><h2 id="FFT算法的性能分析"><a href="#FFT算法的性能分析" class="headerlink" title="FFT算法的性能分析"></a><a name="_toc20606"></a><strong>FFT算法的性能分析</strong></h2><p>FFT模型的实验结果如图20所示。如前所述，在FFT算法中，FFT大小等于输入块的大小，滤波器被填充到与输入块相同的大小。论文只在单个卷积层中计算两种大小(n &#x3D; 4和n &#x3D; 8)的FFT。因为当FFT大小大于8时，片上内存不足以存储论文框架中的所有缓冲区。平均而言，论文的性能模型的预测误差为10.1%。</p><p><strong>图20：FFT算法的性能分析：</strong></p></li></ol><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.039.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.039"></p><p>从图20中可以看出，由于计算效率的提高，DSP成为了丰富的资源。与基于Winograd的实现相比，基于FFT的实现需要更多的Bram，因为过滤器是离线转换的复数。此外，FFT算法消耗更多的逻辑资源(LUT)。准确地说，与Winograd算法相比，FFT算法中有更多的加法和常数乘法，因为包含复数。注意，2-D-FFT变换需要比1-D-FFT变换多2n倍的操作。然而，在Winograd中，输入块的变换只需要两次常数矩阵乘法。</p><ol><li><h2 id="资源的评估验证"><a href="#资源的评估验证" class="headerlink" title="资源的评估验证"></a><a name="_toc12712"></a><strong>资源的评估验证</strong></h2>在以往应用空间算法的FPGA实现中，性能通常受到DSP数量的限制。然而，当应用快速算法时，可能导致DSP利用率较低，应考虑其他资源的使用情况，如LUT和BRAM。论文对资源模型进行评估。表4列出了来自Xilinx Vivado HLS工具的参数，以指导论文中的资源勘探。对于FFT算法，滤波器被填充到与输入块相同的大小并离线转换，r &#x3D; 5的滤波器不需要参数。对于这两种算法，α和β随着n的增加而急剧增加，因为矩阵大小和常数呈指数增长。对于FFT算法，α和β近似相等，因为FFT和IFFT具有相同的算法复杂度。</li></ol><p><strong>表4：参数在模型中的评估：</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.040.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.040"></p><ol><li><h2 id="具体情况的研究"><a href="#具体情况的研究" class="headerlink" title="具体情况的研究"></a><a name="_toc32364"></a><strong>具体情况的研究</strong></h2><p>论文使用AlexNet、VGGNet和Resnet来评估Winograd算法。FFT在VGGNet和YOLO上进行了测试。表4给出了实现中每个网络的参数。对于ZC706平台，论文选择参数Tm &#x3D; Tn &#x3D; 64，对于ZCU102平台，论文选择参数Tm &#x3D; Tn &#x3D; 128。</p></li><li><h3 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a><a name="_toc14982"></a><strong>AlexNet</strong></h3><p>AlexNet由五个卷积和三个FC层组成。输入图像为224 × 224。除了第一个卷积层(11×11)，所有的卷积层都使用小滤波器(5 × 5和3 × 3)。对于第一层，论文选择使用空间卷积算法来实现。对于其余层，论文使用Winograd算法的统一3 × 3过滤器。对于5×5过滤器，论文使用四个零填充的3×3过滤器来实现它。由于AlexNet的层间多样性，论文将2&#x2F;3片上资源作为设计空间探索的约束条件。</p></li></ol><p><strong>表5：AlexNet评估</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.041.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.041"></p><p>表5给出了结果。与之前的工作相比，论文将平均卷积性能从61.6 GOP&#x2F;s提高到1006.4 GOP&#x2F;s。对于整体CNN，论文将性能从72.4 GOP&#x2F;s提高到854.6 GOP&#x2F;s。论文的性能低于[43]，这主要有三个原因。</p><ul><li><p>AlexNet的不规则结构。第一层的步幅是4，如果使用Winograd，这使第一层效率低下。</p></li><li><p>[43]中的频率要高得多。</p></li><li><p>Arria 10中的DSP可以实现为两个FP16乘法器。</p><ol><li><h3 id="VGGNet"><a href="#VGGNet" class="headerlink" title="VGGNet"></a><a name="_toc1396"></a><strong>VGGNet</strong></h3><strong>表6：VGGNet评估</strong></li></ol></li></ul><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.042.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.042"></p><p>VGG16由5个输入大小不同的卷积组(224、112、56、28、14)组成。在VGG16中，所有卷积层都是3 × 3滤波器，很适合Winograd算法。因此，论文将95%的片上资源作为设计空间探索的约束条件。表6将论文的技术与之前的工作进行了比较。对于卷积层，论文将平均性能从1283 GOP&#x2F;s提高到2601.4 GOP&#x2F;s。对于整体CNN，论文将性能从866 GOP&#x2F;s提高到2479.6 GOP&#x2F;s。由于Intel FPGA和Xilinx FPGA的DSP配置不同。为了在不同平台之间进行公平的比较，论文还展示了每个平台的总资源效率和能源效率。可以观察到，论文的实现了更好的资源效率，这来自算术复杂度的降低和新架构的实现。</p><p>注意到VGG16的性能比AlexNet高。这是因为VGG16使用了统一的卷积结构，而AlexNet使用了两种不同的卷积结构。论文还发现卷积层的性能随着网络的深入而降低。这是因为初始时间(Tinit)占总时间(Ttotal)较多，初始时间只涉及数据传输，没有实际计算。在ZC706平台上应用FFT快速算法对VGGNet进行加速，并与同样应用FFT算法的其他工作进行比较，性能从123.5 GOP&#x2F;s提高到277.8 GOP&#x2F;s，能效从9.3提高到29.4。</p><ol><li><h3 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a><a name="_toc13224"></a><strong>YOLO</strong></h3><p>You only look once (YOLO)是一种最先进的网络实时目标检测系统。论文使用Tiny-YOLO版本来评估论文的设计。Tiny-YOLO包含9个卷积层和6个最大池化层。所有卷积层都使用3 × 3滤波器。论文应用FFT算法对YOLO网络进行加速，结果如表7所示，各层详细性能如图21所示。论文注意到前几个层的性能有所提高。这是因为前几层的通道数量相对较少，这意味着更少的数据重用机会，因此这些层的性能受到片外带宽的限制。</p><p><strong>图21：YOLO各层的详细性能：</strong></p></li></ol><p><code>     </code><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.043.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.043"></p><p><strong>表7：YOLO和Resnet的评估</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.044.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.044"> </p><ol><li><h3 id="Resnet"><a href="#Resnet" class="headerlink" title="Resnet"></a><a name="_toc5634"></a><strong>Resnet</strong></h3>Resnet是一种用于图像识别的现代网络，由许多残差块组成。残差块由两个1 × 1卷积层和一个3 × 3卷积层组成。设(2&#x2F;3)片上资源为快速算法的约束条件。采用Winograd算法对3 × 3卷积层进行加速，采用空间卷积算法对1 × 1卷积层进行加速。表7给出了结果。卷积层的性能为163.1 GOP&#x2F;s，整个网络的性能为130.4 GOP&#x2F;s。论文的性能不如其他的工作，这主要来自两个方面：</li></ol><ul><li>在Intel Altera平台上，单个DSP可以实现为两个16×16定点乘法器。</li><li>部分片上资源用于1 × 1滤波器，这些滤波器占剩余块中40%的计算量。</li></ul><ol><li><h2 id="与GPU的比较"><a href="#与GPU的比较" class="headerlink" title="与GPU的比较"></a><a name="_toc6720"></a><strong>与GPU的比较</strong></h2>论文对GPU和FPGA平台进行比较。对于GPU，论文在NVIDIA TitanX平台上使用Caffe框架来测量VGG16的性能。为了做一个公平的比较，论文用最新的cuDNN[47]测试了TitanX的性能，因为Winograd和FFT算法也包含在cuDNN中，GPU上的Power是使用NVIDIA剖析工具获得的。表8显示了比较结果。在cuDNN中，Winograd算法优于FFT算法，因为FFT算法需要大量的内存空间来存储中间结果，比Winograd需要更多的时间。TitanX提供了更好的性能，但论文在Xilinx ZCU102 FPGA上的实现实现了更好的能源效率(2.5倍)。</li></ol><p><strong>表8：与GPU的比较</strong></p><p><img src="/Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.045.png" alt="Aspose.Words.5ffe5bf3-f88b-45a4-9a96-5d3676b52f58.045"></p><h1 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a><a name="_toc105073190"></a><a name="_toc29971"></a><strong>9. 总结</strong></h1><p>本次调研了论文《Evaluating Fast Algorithm for Convolutional Neural Networks on FPGAs》。FPGA已被广泛用于加速基于CNN的应用。然而，以往基于空间算法的实现主要受到FPGA计算能力的限制。在论文中，提出了一种基于快速算法的FPGA框架，该框架可以有效减少卷积层的乘法次数。针对Winograd算法和FFT算法设计了一个高效的PE引擎。为了指导快速的设计空间探索，论文还开发了分析模型来估计资源的使用和性能。在ZCU102 FPGA平台上实现的峰值性能达到2479.6 GOP&#x2F;s，优于以往的所有工作。通过本次调研论文，我掌握了深度学习和卷积神经网络的计算过程，了解了不同的优化策略和新型架构，为之后的深入学习奠定了基础。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="_toc105073191"></a><a name="_toc12708"></a><strong>参考文献</strong></h1><p>[1] C. Zhang et al, “Energy-efficient CNN implementation on a deeply pipelined FPGA cluster,” in Proc. Int. Symp. Low Power Electron. </p><p>[2] N. Suda et al, “Throughput-optimized OpenCL-based FPGA accelerator for large-scale convolutional neural networks,” in Proc. ACM&#x2F;SIGDA Int.</p><p>[3] J. Qiu et al, “Going deeper with embedded FPGA platform for convolutional neural network,” in Proc. ACM&#x2F;SIGDA Int. Symp. Field Program.</p><p>[4] Y . Ma, N. Suda, Y . Cao, J. S. Seo, and S. Vrudhula, “Scalable and modularized RTL compilation of convolutional neural networks onto FPGA,” in Proc. Int. Conf. Field Program. </p><p>[5] H. Li et al, “A high performance FPGA-based accelerator for largescale convolutional neural networks,” in Proc. Int. Conf. Field Program.</p><p>[6] Y . Ma, Y . Cao, S. Vrudhula, and J.-S. Seo, “Optimizing loop operation and dataflow in FPGA acceleration of deep convolutional neural networks,” in Proc. ACM&#x2F;SIGDA Int. </p><p>[7] J. Zhang and J. Li, “Improving the performance of OpenCL-based FPGA accelerator for convolutional neural network,” in Proc. ACM&#x2F;SIGDA Int.</p><p>[8] K. He, X. Zhang, S. Ren, and J. Sun, “Delving deep into rectifiers: Surpassing human-level performance on ImageNet classification,” in Proc. IEEE Int. Conf. Comput. Vis., 2015, pp. 1026–1034.</p><p>[9] R. Girshick, J. Donahue, T. Darrell, and J. Malik, “Rich feature hierarchies for accurate object detection and semantic segmentation,” in Proc.</p><p>IEEE Conf. Comput. Vis. Pattern Recognit., 2014, pp. 580–587.</p><p>[10] A. Krizhevsky, I. Sutskever, and G. E. Hinton, “ImageNet classification with deep convolutional neural networks,” in Proc. Adv. Neural Inf.</p><p>[11] K. He, X. Zhang, S. Ren, and J. Sun, “Deep residual learning for image recognition,” in Proc. IEEE Conf. Comput. Vis. Pattern Recognit., 2016, pp. 770–778.</p><p>[12] C. Szegedy et al, “Going deeper with convolutions,” in Proc. IEEE Conf. Comput. Vis. Pattern Recognit., 2015, pp. 1–9.</p><p>[13] C. Zhang et al, “Optimizing FPGA-based accelerator design for deep convolutional neural networks,” in Proc. ACM&#x2F;SIGDA Int. Symp. Field Program. Gate Arrays, 2015, pp. 161–170.</p><p>[14] X. Zhang, J. Zou, X. Ming, K. He, and J. Sun, “Efficient and accurate approximations of nonlinear convolutional networks,” in Proc. IEEE Conf. Comput. Vis. Pattern Recognit., 2015, pp. 1984–1992.</p><p>[15] Y .-H. Chen, J. Emer, and V . Sze, “Eyeriss: A spatial architecture for energy-efficient dataflow for convolutional neural networks,” in Proc.</p>]]></content>
      
      
      <categories>
          
          <category> -Digital Circuits Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模集】源极跟随器的设计与改进</title>
      <link href="/2023/04/01/%E3%80%90%E6%A8%A1%E9%9B%86%E3%80%91%E6%BA%90%E6%9E%81%E8%B7%9F%E9%9A%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%94%B9%E8%BF%9B/"/>
      <url>/2023/04/01/%E3%80%90%E6%A8%A1%E9%9B%86%E3%80%91%E6%BA%90%E6%9E%81%E8%B7%9F%E9%9A%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%94%B9%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p><a href="#_toc6952"><strong>一、 待解决的问题3</strong></a></p><p><a href="#_toc22667"><strong>二、 待仿真的电路3</strong></a></p><p><a href="#_toc12650"><strong>三、 计算与仿真结果分析5</strong></a></p><p><a href="#_toc13733">3.1带有源极电阻的源极跟随器6</a></p><p><a href="#_toc30363">3.2利用MOS管作为电流偏置的源极跟随器7</a></p><p><a href="#_toc7224">3.3 FVF(Flipped Voltage Follower)9</a></p><p><a href="#_toc15762">3.4 三种源极跟随器结构Vin−Vout非线性偏差比较10</a></p><p><a href="#_toc32733"><strong>四、 心得11</strong></a></p><ol><li><a name="_toc471"></a><a name="_toc20719"></a><a name="_toc6952"></a><strong>待解决的问题</strong></li></ol><p>源极跟随器的主要结构如图（1）所示，其在理想情况下的输出电压Vout与输入电压Vin的关系如图（2）所示，可以发现Vout会跟随Vin等幅增大，它们的差值Vin−Vout&#x3D;VGS不会改变，体现了电压跟随的作用。但是实际情况下，Vout不能忠实地跟随Vin，而会产生一定的偏差，如图（3）所示。<strong>请分析带有源极电阻和带有MOS管的源极跟随器线性度和增益的变化趋势，并思考如何改善源极跟随器的线性度，让</strong>Vout<strong>忠实地跟随</strong>Vin<strong>发生变化。</strong></p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.002.png">           <img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.003.png"></p><p><code>   </code><center>图1：理想情况下的源极跟随器         图2：源极跟随器的电压转移曲线</center></p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.004.png"></p><p><code>   </code><center>图3：实际情况下的电压转移曲线</center></p><ol><li><a name="_toc5790"></a><a name="_toc3121"></a><a name="_toc22667"></a><strong>待仿真的电路</strong></li></ol><p>待仿真的电路图如下所示，分别是带有源极电阻的源极跟随器、利用MOS管作为偏置电流的源极跟随器以及FVF(Flipped Voltage Follower)，其中FVF可以有效改善源极跟随器的线性度，让Vout忠实地跟随Vin发生变化。</p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.005.png" alt="R_颜色反转"></p><p><code> </code><center>图4：带有源极电阻的源极跟随器</center></p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.006.png" alt="MOS_颜色反转"></p><p><code> </code><center>图5：利用MOS管作为偏置电流的源极跟随器</center></p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.007.png" alt="1_颜色反转"></p><p><code> </code><center>图6：FVF(Flipped Voltage Follower)</center></p><p>在三个不同结构的源极跟随器中，NMOS管的部分模型参数如表1所示，采用的是tsmc18工艺库。</p><p><strong>表1 纳米级NMOS晶体管的模型参数</strong></p><table><thead><tr><th align="center">参数</th><th align="center">NMOS</th></tr></thead><tbody><tr><td align="center">W(um)</td><td align="center">2</td></tr><tr><td align="center">L(nm)</td><td align="center">180</td></tr><tr><td align="center">VTH(mV)</td><td align="center">0.6</td></tr><tr><td align="center">Multiplier</td><td align="center">1</td></tr><tr><td align="center">Fingers</td><td align="center">1</td></tr></tbody></table><ol><li><a name="_toc1367"></a><a name="_toc7325"></a><a name="_toc12650"></a><strong>计算与仿真结果分析</strong></li></ol><p>首先可以给出Vout不能忠实地跟随Vin的原因，主要有以下两点：<strong>一是漏电流受输入直流电平的强烈影响</strong>，因为IDS&#x3D;12μnCox(WL)n(VGS−VTHN)2，Vin增大，意味着VGS也会增大，导致漏电流增大，进而会使输入输出电压特性呈现非线性偏差。<strong>二是因为衬偏效应的影响</strong>，以带有源极电阻的源极跟随器的结构为例，大信号分析列出电流方程，通过Vout对Vin求偏导，就可以得出电压增益的具体表达式如下所示：AV&#x3D;gmRS1+(gm+gmB)RS≈11+η(RS≫gm≫1)，收到衬偏效应的影响，AV最后不能等于1，此外η本身也会随着Vout增大而减小，因此Vout不能忠实地跟随Vin，存在偏差。</p><p>对三种不同结构的源极跟随对输入电压Vin进行DC扫描分析，在不同情况下绘制三种不同结构的Vout-Vin曲线以及AV-Vin，分析不同结构的线性度的变化。</p><p><a name="_toc15695"></a><a name="_toc15221"></a><a name="_toc13733"></a><strong>3.1带有源极电阻的源极跟随器</strong></p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.008.jpeg" alt="Vout_Vin"></p><center>图7：带有源极电阻的源极跟随器，**Vout**-**Vin**曲线</<p>图（7）中的曲线簇是在通过对源极电阻RS进行参数扫描的条件下得到的，扫描范围是1kΩ-10kΩ，最上面的曲线代表了Vin的变化趋势。从图中可以看出，随着Vin的增大，输入电压与输出电压的差值Vin−Vout并不是不变的，而是逐渐变大的，存在一定的偏差，随着RS的增大，这种偏离程度逐渐变小，但是没有办法消除。以RS&#x3D;10kΩ的最佳情况下的曲线进行分析，可以看到，一开始Vin−Vout&#x3D;0.4V，Vin&#x3D;1.8V时Vin−Vout&#x3D;0.9V，<strong>变化了</strong>0.9−0.40.4**&#x3D;125%，偏差较大**。</p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.009.jpeg" alt="Av-Vin"></p><center>图8：带有源极电阻的源极跟随器，**AV**-**Vin**曲线</center><p>图（8）描绘了不同源极电阻RS下的AV*-*Vin曲线，首先可以发现，随着RS的增大，AV有所提高，这是因为RS增大，在源极电阻上的分压会变大，Vout变大，因此增益变大。同时可以发现，随着Vin增大，AV迅速增大，最后增产趋势放缓，逐渐稳定在某一个值附近，但是AV不会到达1，这是因为衬偏效应η的影响。</p><p><a name="_toc30363"></a><strong>3.2利用MOS管作为电流偏置的源极跟随器</strong></p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.010.jpeg" alt="Vout-Vin"></p><center>图9：利用MOS管作为电流偏置的源极跟随器，**Vout**-**Vin**曲线</center><p>图（9）中的曲线簇是在通过对MOS管的偏置电压VB进行参数扫描的条件下得到的，扫描范围是0.6V-1.8V（不能低于MOS管的阈值电压），最上面的曲线代表了Vin的变化趋势。从图中可以看出，随着Vin的增大，输入电压与输出电压的差值Vin−Vout并不是不变的，而是逐渐变大的，存在一定的偏差，随着VB的减小，这种偏离程度逐渐变小。以VB&#x3D;0.6V的最佳情况下进行分析，可以看到，一开始Vin−Vout&#x3D;0.5V，Vin&#x3D;1.8V时Vin−Vout&#x3D;0.8V，<strong>差值变化了</strong>0.8−0.50.5**&#x3D;60%，**偏差比带有源极电阻的源极跟随器的偏差来说相对较小，但是仍然很大。</p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.011.jpeg" alt="Av"></p><center>图10：利用MOS管作为电流偏置的源极跟随器，**AV**-**Vin**曲线</center><p>图（10）描绘了不同偏置电压VB下的AV*-*Vin曲线，首先可以发现，随着VB的减小，AV有所提高。同时可以发现，随着Vin增大，AV迅速增大，最后增产趋势放缓，在Vin&#x3D;1.8V时，AV&#x3D;0.55，比带有源极电阻的源极跟随器的增益要大。</p><p>可以看出，利用MOS管作为电流偏置的源极跟随器相比于带有源极电阻的源极跟随器，在最佳情况下的增益要更大，Vout*-*Vin曲线的偏差更小。</p><p><a name="_toc7224"></a><strong>3.3 FVF(Flipped Voltage Follower)</strong></p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.012.png"></p><center>图11：Flipped Voltage Follower</center><p>FVF结构的电路图如图（11）所示，<strong>该结构可以有效减弱输入电平对漏电流的影响。</strong>如果输入电压增大，根据之前的分析可以得到漏电流会增大，但是由于M1管漏极电压的变化与Vin反向，因此M1管漏极电压会降低，此时M2管的栅压会降低，因此流过M2的电流会减小，也就是流过M1的漏电流会减小，有效减弱了电平对漏电流的影响，因此Vout与Vin的偏差会减小，线性度会增加。</p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.013.jpeg" alt="Vout-Vin"></p><center>图12：FVF，**Vout**-**Vin**曲线</center><p>图（12）中的曲线簇是在通过对FVF结构中的电流源进行参数扫描的条件下得到的，扫描范围是10μA-190μA，最上面的曲线代表了Vin的变化趋势。从图中可以看出，随着Vin的增大，输入电压与输出电压的差值Vin−Vout在某一个区间内是基本保持不变线性的。以电流源电流10μA的最佳情况下进行分析，可以看到，一开始Vin−Vout&#x3D;0.5V，Vin&#x3D;1.8V时Vin−Vout&#x3D;0.7V，<strong>差值变化了</strong>0.7−0.50.5**&#x3D;40%，<strong>偏差比利用MOS管作为电流偏置的源极跟随器的偏差来说还要小，但是可以看到，</strong>FVF结构<strong>Vin−Vout</strong>的线性度虽然有较大提升，但是线性范围比较小。**</p><p><img src="/Aspose.Words.8d339d8e-d087-420c-9fdb-d7baa1b7eafc.014.jpeg" alt="Av"></p><center>图13：FVF，**AV**-**Vin**曲线</center><p>图（13）描绘了不同电流源电流下的AV*-*Vin曲线，首先可以发现，随着电流源的电流增大，AV有所减小。同时可以发现，AV在Vin达到一定数值后会有下降趋势，比另外两种结构的增益要略微偏小。</p><p><a name="_toc15762"></a><strong>3.4 三种源极跟随器结构</strong>Vin−Vout<strong>非线性偏差比较</strong></p><p><strong>表2 三种源极跟随器结构</strong>Vin−Vout<strong>非线性偏差比较</strong></p><table><thead><tr><th align="center">结构</th><th align="center">带有源极电阻RS</th><th align="center">MOS管作电流偏置</th><th align="center">FVF</th></tr></thead><tbody><tr><td align="center">Vin−Vout<strong>偏差程度</strong></td><td align="center">125%</td><td align="center">60%</td><td align="center"><code> </code>40%</td></tr></tbody></table><p>从三种结构的比较中可以看到，FVF的Vin−Vout偏差程度最小，这是因为FVF的结构可以以有效抑制输入电平对漏电流的影响，让漏电流基本保持稳定。</p><ol><li><a name="_toc9626"></a><a name="_toc19391"></a><a name="_toc32733"></a><strong>心得</strong></li></ol><p>本实验从源极跟随器的不同结构出发，探讨导致输入输出电压非线性偏差的原因，同时给出了一种新型的FVF结构，可以有效抑制漏电流的变化，使得输入输出电压的偏差程度最小，为以后设计更为复杂的电路奠定了基础。</p>]]></content>
      
      
      <categories>
          
          <category> Analog Circuits Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模集】纳米级晶体管的设计</title>
      <link href="/2023/04/01/%E3%80%90%E6%A8%A1%E9%9B%86%E3%80%91%E7%BA%B3%E7%B1%B3%E7%BA%A7%E6%99%B6%E4%BD%93%E7%AE%A1%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/04/01/%E3%80%90%E6%A8%A1%E9%9B%86%E3%80%91%E7%BA%B3%E7%B1%B3%E7%BA%A7%E6%99%B6%E4%BD%93%E7%AE%A1%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p><a href="#_toc471"><strong>一、 待解决的问题3</strong></a></p><p><a href="#_toc3121"><strong>二、 待仿真的电路3</strong></a></p><p><a href="#_toc1367"><strong>三、 计算与仿真结果分析4</strong></a></p><p><a href="#_toc15221">3.1给定ID, VDS,min情况下的设计4</a></p><p><a href="#_toc13783">3.2给定gm,ID情况下的设计6</a></p><p><a href="#_toc11312">3.3给定 gm, VDS,min情况下的设计8</a></p><p><a href="#_toc9626"><strong>四、 心得9</strong></a></p><ol><li><a name="_toc20719"></a><a name="_toc471"></a><strong>待解决的问题</strong></li></ol><p>之前推导的MOS管模型方程只适用于长沟道器件，不适用于纳米级的短沟道器件。<strong>因此，纳米级的MOS管设计没有准确的公式模型，需要通过仿真工具来辅助设计。</strong>在纳米级晶体管的设计中，我们重点关注以下几个参数，分别是：ID, VDS,min, gm, WL. 典型的晶体设计的问题是，给定前三个参数中的两个，求解余下的一些参数，如表1所示。</p><p><strong>表1 纳米级晶体管设计遇到的三种情况</strong></p><table><thead><tr><th align="center"></th><th align="center">情况I</th><th align="center">情况II</th><th align="center">情况III</th></tr></thead><tbody><tr><td align="center">给定的参数</td><td align="center">ID, VDS,min</td><td align="center">gm, ID</td><td align="center"><code> </code>gm, VDS,min</td></tr><tr><td align="center">需求解的参数</td><td align="center"><code> </code>gm, WL</td><td align="center">VDS,min, WL</td><td align="center">ID, WL</td></tr><tr><td align="center"><code></code>修改设计</td><td align="center"><p>gm不足</p><p>增加ID和WL</p></td><td align="center"><p>VDS,min太大</p><p>增加WL</p></td><td align="center"><p>ID太大</p><p>增加WL, 降低VDS,min</p></td></tr></tbody></table><p>从表中可以看出，如果设计的指标不满足，还需要进一步进行调整。如何设计出系统性的方法，对纳米级MOS器件的另外另个参数进行求解，设计出符合要求的MOS器件成为了一个问题。</p><ol><li><a name="_toc5790"></a><a name="_toc3121"></a><strong>待仿真的电路</strong></li></ol><p><img src="/Aspose.Words.d97e5081-943f-4861-8ba2-1f0ce7826129.002.png"></p><center>图1：待仿真的纳米级NMOS器件</center><p>为了进一步探究如何设计纳米级器件，以NMOS器件为例，仿真电路图如图1所示。NMOS管的部分模型参数如表2所示，采用tsmc18工艺库。</p><p><strong>表2 纳米级NMOS晶体管的模型参数</strong></p><table><thead><tr><th align="center">参数</th><th align="center">NMOS</th></tr></thead><tbody><tr><td align="center">W(um)</td><td align="center">5</td></tr><tr><td align="center">L(nm)</td><td align="center">180</td></tr><tr><td align="center">VTH(mV)</td><td align="center">0.5</td></tr><tr><td align="center">Multiplier</td><td align="center">1</td></tr><tr><td align="center">Fingers</td><td align="center">1</td></tr></tbody></table><p>从表2中可以看出NMOS器件的沟段长度已经处于纳米级别，属于短沟道器件的范围，不能用长沟道的平方律模型进行分析，而需要仿真软件进行辅助。</p><ol><li><a name="_toc7325"></a><a name="_toc1367"></a><strong>计算与仿真结果分析</strong></li></ol><p><a name="_toc15695"></a><a name="_toc15221"></a><strong>3.1给定</strong>ID, VDS,min<strong>情况下的设计</strong></p><p>给出具体情况，考虑ID&#x3D;1mA, VDS,min&#x3D;650mV, 希望确定器件的尺寸和跨导。具体步骤如下所示：</p><p><strong>Step1:</strong> 选择一个参考晶体管，其宽度为WREF, 长度为允许的最小长度，为Lmin&#x3D;180nm. 可以取WREF&#x3D;5μm.</p><p><strong>Step2:</strong> 用实际器件模型和电路仿真器，绘制出参考晶体管在不同VGS条件下的ID-VDS特性曲线, 如图2所示。</p><p><strong>Step3:</strong> 对于ID*-*VDS特性曲线，在VDS&#x3D;650mV处画一条竖线并且找到它与曲线的交点，在这里我们暂且选取VDS,min&#x3D;VGS-VTH&#x3D;650mV（VGS&#x3D;700mV)的那条曲线进行分析，可以发现交点坐标处电流的取值为ID,REF&#x3D;0.25mA. </p><p><strong>Step4:</strong> 可以发现ID,REF并不满足给定的ID, <strong>我们可以对晶体管的宽度进行缩放，从而改变漏电流的值。</strong>实际的晶体管宽度W&#x3D;IDID,REF×WREF&#x3D;20μm.</p><p><img src="/Aspose.Words.d97e5081-943f-4861-8ba2-1f0ce7826129.003.jpeg" alt="I-VDS"></p><center>给定ID, VDS,min情况下的设计，ID-VDS特性曲线</center><p>接下来还需要确定纳米级NMOS器件的跨导，采用仿真的方法进行分析，在VDS&#x3D;650mV的条件下画出跨导与VGS的曲线，如图3所示。</p><p><img src="/Aspose.Words.d97e5081-943f-4861-8ba2-1f0ce7826129.004.jpeg" alt="gm-VGS"></p><center>给定ID, VDS,min情况下的设计，gm-VGS特性曲线</center><p>在平方律模型下图3所示曲线应当成线性关系，但是由于短沟道效应，gm最终会达到一个饱和值。可以发现在VGS-VTH&#x3D;650mV（VGS&#x3D;700mV)的时候，gm,REF&#x3D;1.529mS. 如果将宽度和漏电流都扩大4倍，则gm也会扩大4倍，将会达到gm&#x3D;7.645mS, 到这里就完成了纳米级NMOS晶体管的设计。</p><p>可以看到，在一开始选择ID*-*VDS特性曲线的时候，我们主要选择的是VDS,min&#x3D;VGS-VTH&#x3D;650mV（VGS&#x3D;700mV)的那条曲线进行分析，如果选择VGS-VTH值更大的曲线进行分析，所得到的gm会偏小，这是因为gm&#x3D;2IDVGS−VTH，而ID又是给定的，因此当VGS-VTH变大的时候，gm会变小，因此我们通常选择VDS,min&#x3D;VGS-VTH， 尽管这会使晶体管更宽。</p><p><a name="_toc13783"></a><strong>3.2给定</strong>gm,ID<strong>情况下的设计</strong></p><p>在这里，我们给定gm1&#x3D;4mS, ID1&#x3D;0.7mA. 首先我们需要考虑的一个问题是由于亚阈值的存在，gm会存在一个极值，我们需要检验gm是否合理。我们知道在亚阈值区域gmax&#x3D;IDεVT&#x3D;18mS&gt;gm(ε&#x3D;1.5), 因此可以得知gm合理，可以继续进行设计。具体步骤如下所示：</p><p><strong>Step1:</strong> 选择一个参考晶体管WREF&#x2F;Lmin&#x3D;5μm&#x2F;180nm, 画出参考晶体管的gm与ID的关系曲线，如图4所示。</p><p><img src="/Aspose.Words.d97e5081-943f-4861-8ba2-1f0ce7826129.005.jpeg" alt="gm-ID"></p><center>给定gm,ID情况下的设计，gm-ID的特性曲线</center><p><strong>Step2:</strong> 在gm与ID的平面上，找到给定的点(gm1,ID1)&#x3D;(4mS,0.7mA)<em>,</em> 从原点到该点画一条直线，得到交点(gm,REF,ID,REF)&#x3D;(2mS,0.35mA)<em>,</em> 如图4所示。</p><p><strong>Step3:</strong> 做出ID与VGS的曲线，通过IREF得到所设计的VGS, 因此可以计算出VDS,min&#x3D;VGS-VTH&#x3D;219.34mV, 如图5所示。</p><p><img src="/Aspose.Words.d97e5081-943f-4861-8ba2-1f0ce7826129.006.jpeg" alt="ID-Vgs"></p><center>给定gm,ID情况下的设计，ID-VGS的特性曲线</center><p><strong>Step4:</strong> 我们对WREF乘以比例因子gm1&#x2F;gm,REF&#x3D;2, 得到W&#x3D;gm1gm,REF×WREF&#x3D;10μm. 完成了纳米级晶体管的设计。</p><p><img src="/Aspose.Words.d97e5081-943f-4861-8ba2-1f0ce7826129.007.png"></p><center>不能实现gm的区域</center><p>同时，这也带来一个问题，也就是经过原点与(gm1,ID1)的直线是否一定会与gm−ID曲线相交。如果我们考虑一个工作在强反型区域的平方律晶体管，那么在原点处的斜率应该是无穷大，这也保证了交点一定存在。然而，当ID1很小的时候，已经不符合平方律了，进入亚阈值区，此时gm1正比于ID1, 因此图5中灰色区域的组合是实现不了的，如图5所示。</p><p><a name="_toc11312"></a><strong>3.3给定</strong> gm, VDS,min<strong>情况下的设计</strong></p><p>在这种情况下，我们给定gm1&#x3D;9mS,* VDS,min&#x3D;150mV*.*</p><p><strong>Step1:</strong> 对于参考晶体管，我们通过仿真画出gm与VGS的关系曲线，如图6所示。我们选取VDS,min&#x3D;VGS-VTH&#x3D;650mV（VGS&#x3D;700mV)的那一点，可以得到跨导gm,REF&#x3D;1.7855mS。</p><p><img src="/Aspose.Words.d97e5081-943f-4861-8ba2-1f0ce7826129.008.jpeg" alt="gm-Vgs"></p><center>给定gm, VDS,min情况下的设计，gm-VGS的特性曲线</center><p><img src="/Aspose.Words.d97e5081-943f-4861-8ba2-1f0ce7826129.009.jpeg" alt="ID-Vgs"></p><center>给定gm, VDS,min情况下的设计，ID-VGS的特性曲线</center><p><strong>Step2:</strong> 同时，做出做出ID与VGS的曲线，通过VGS得到的ID,REF&#x3D;213.17μA，如图7所示。</p><p><strong>Step3：</strong>计算比例因子gm1&#x2F;gm,REF≈5, 因此W&#x3D;gm1gm,REF×WREF&#x3D;25μm, 同时可以得到ID&#x3D;gm1gm,REF×ID,REF&#x3D;1.07mA，完成了相关设计。</p><ol><li><a name="_toc9626"></a><a name="_toc19391"></a><strong>心得</strong></li></ol><p>本次实验充分探讨了在平方律模型不适用下的纳米级晶体管如何设计问题，需要借助仿真软件来辅助进行设计。探讨问题的过程具有创新性，通过参考晶体管最后尺寸扩倍的创新方法，完成了纳米级MOS晶体管的设计，为之后更为复杂的设计奠定了基础。</p>]]></content>
      
      
      <categories>
          
          <category> Analog Circuits Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模集】共源级MOS放大电路增益、负载的讨论分析</title>
      <link href="/2023/04/01/%E3%80%90%E6%A8%A1%E9%9B%86%E3%80%91%E5%85%B1%E6%BA%90%E7%BA%A7MOS%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF%E5%A2%9E%E7%9B%8A%E3%80%81%E8%B4%9F%E8%BD%BD%E7%9A%84%E8%AE%A8%E8%AE%BA%E5%88%86%E6%9E%90/"/>
      <url>/2023/04/01/%E3%80%90%E6%A8%A1%E9%9B%86%E3%80%91%E5%85%B1%E6%BA%90%E7%BA%A7MOS%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF%E5%A2%9E%E7%9B%8A%E3%80%81%E8%B4%9F%E8%BD%BD%E7%9A%84%E8%AE%A8%E8%AE%BA%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong></p><p><a href="#_toc20719"><strong>一、 待解决的问题3</strong></a></p><p><a href="#_toc1/2774">1.1增益AV表达式的一对矛盾3</a></p><p><a href="#_toc28654">1.2为什么NMOS传“弱1”？3</a></p><p><a href="#_toc27258">1.3采用二极管连接的NMOS&#x2F;PMOS做负载的共源级MOS的区别4</a></p><p><a href="#_toc5790"><strong>二、 待仿真的电路4</strong></a></p><p><a href="#_toc20938">2.1探究增益AV表达式一对矛盾的仿真电路4</a></p><p><a href="#_toc26798">2.2探究NMOS传“弱1”的仿真电路5</a></p><p><a href="#_toc30010">2.3探究NMOS&#x2F;PMOS做负载的共源级MOS区别的仿真电路5</a></p><p><a href="#_toc7325"><strong>三、 计算与仿真结果分析6</strong></a></p><p><a href="#_toc15695">3.1增益AV表达式的一对矛盾6</a></p><p><a href="#_toc23768">3.1.1对于问题的相关解释6</a></p><p><a href="#_toc26326">3.1.2对于问题的仿真分析6</a></p><p><a href="#_toc1724">3.2探究NMOS传“弱1”的相关原理9</a></p><p><a href="#_toc18007">3.1.1对于问题的相关解释9</a></p><p><a href="#_toc24274">3.1.1对于问题的仿真验证9</a></p><p><a href="#_toc1/2264">3.3探究NMOS&#x2F;PMOS做负载的共源级MOS的区别10</a></p><p><a href="#_toc19391"><strong>四、 心得11</strong></a></p><ol><li><a name="_toc20719"></a><strong>待解决的问题</strong></li></ol><p><a name="_toc1/2774"></a><strong>1.1增益</strong>AV<strong>表达式的一对矛盾</strong></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.002.png"></p><p>如图所示的采用二极管连接的PMOS做负载的共源级结构，当M1管刚开启的时候，M1和M2都位于饱和区，分析此时的增益表达式，可知ID1&#x3D;|ID2|.</p><p>可以列出等式 1&#x2F;2μnCox(W&#x2F;L)1(VGS1−VTH1)^2&#x3D;1&#x2F;2μpCox(W&#x2F;L)2(VGS2−VTH2)^2，又因为AV&#x3D;−μn(W&#x2F;L)1&#x2F;μp(W&#x2F;L)2，可以得出AV&#x3D;|VGS2−VTH2|&#x2F;(VGS1−VTH1).</p><p>此外，用另外一种方法也可以推出AV的表达式，AV&#x3D;gm1&#x2F;gm2&#x3D;μn(W&#x2F;L)1(VGS1−VTH1)&#x2F;μp(W&#x2F;L)2|VGS2−VTH2|. 可以发现，第一个表达式中AV与VGS2成正相关，与VGS1呈负相关，但是第二个表达式恰好相反，请解释构成这一对矛盾的原因。</p><p><a name="_toc28654"></a><strong>1.2为什么NMOS传“弱1”？</strong></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.003.png"></p><p>如图所示的NMOS电路中，将NMOS源端电压记作VS，当电流源I1跳变到0时，VS基本只能上升到VDD−VTH2，不会达到VDD. 请解释这一现象。</p><p><a name="_toc27258"></a><strong>1.3采用二极管连接的NMOS&#x2F;PMOS做负载的共源级MOS的区别</strong></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.004.png"></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.005.png"></p><p>如图所示，探讨采用二极管连接的NMOS&#x2F;PMOS做负载共源级MOS区别。</p><ol><li><a name="_toc5790"></a><strong>待仿真的电路</strong></li></ol><p><a name="_toc20938"></a><strong>2.1探究增益</strong>AV<strong>表达式一对矛盾的仿真电路</strong></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.006.png"></p><p><a name="_toc26798"></a><strong>2.2探究NMOS传“弱1”的仿真电路</strong></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.007.png"></p><p><a name="_toc30010"></a><strong>2.3探究NMOS&#x2F;PMOS做负载的共源级MOS区别的仿真电路</strong></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.008.png"></p><p>其中PMOS做负载的共源级MOS的仿真电路如图所示，对二者进行分析。</p><p><strong>表1 MOS晶体管的模型参数</strong></p><table><thead><tr><th align="center">参数</th><th align="center">PMOS</th><th align="center">NMOS</th></tr></thead><tbody><tr><td align="center">W(um)</td><td align="center">20</td><td align="center">5</td></tr><tr><td align="center">L(um)</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">Multiplier</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">Fingers</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><p>表1为仿真时PMOS和NMOS晶体管的模型参数，MOS管的阈值电压在上述的图像中已经标出，因此表1中没有涉及。</p><ol><li><a name="_toc7325"></a><strong>计算与仿真结果分析</strong></li></ol><p><a name="_toc15695"></a><strong>3.1增益</strong>AV<strong>表达式的一对矛盾</strong></p><p><a name="_toc23768"></a><strong>3.1.1对于问题的相关解释</strong></p><p>构成AV不同的主要原因在于AV&#x3D;|VGS2−VTH2|&#x2F;(VGS1−VTH1) 的条件是基于<strong>直流工作点</strong>的推导，而AV&#x3D;gm1gm2&#x3D;μn(W&#x2F;L)1(VGS1−VTH1)&#x2F;μp(W&#x2F;L)2|VGS2−VTH2|的条件是基于<strong>交流小信号</strong>的推导，两者的推导条件有本质上的区别，因此产生了表面上表达式的一组矛盾。从推导过程中也可以看出，AV&#x3D;|VGS2−VTH2|&#x2F;(VGS1−VTH1)的推导前提是ID1&#x3D;|ID2|，也就是说此时运算得到的AV是<strong>针对某一个特定的</strong>VGS2<strong>和</strong>VGS1得到的增益。而AV&#x3D;gm1gm2&#x3D;μn(W&#x2F;L)1(VGS1−VTH1)&#x2F;μp(W&#x2F;L)2|VGS2−VTH2|推导中利用的跨导是在交流小信号模型中得出的，此时的VGS2，VGS1<strong>是一个幅值较小的正弦信号</strong>，两者的推导过程存在本质区别。</p><p><a name="_toc26326"></a><strong>3.1.2对于问题的仿真分析</strong></p><p>对图中采取的电路进行DC扫描分析，为避免MOS管进入亚阈值区域，输入信号的变化范围是0.5~1.8V，观察在直流工作点下的增益变化。</p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.009.jpeg"></p><p>从图中可以看出，随着Vin增加，也就是VGS1增加，增益AV下降，这也符合AV&#x3D;|VGS2−VTH2|&#x2F;(VGS1−VTH1)的变化趋势。</p><p>值得注意的是，在低频条件下对输入信号进行AC扫描的时，可以发现增益AV保持不变，如图所示。原因在于在交流小信号的推导模型中，列出两个MOS管电流相等的方程后，对Vout求Vin偏导，如果忽略阈值电压的变化，AV&#x3D;∂Vout&#x2F;∂Vin&#x3D;−μn(W&#x2F;L)1μp(W&#x2F;L)2，此时可以发现AV只和MOS管的参数有关，而与所施加的偏置电压和偏置电流的大小无关。这也说明，如果想要增大增益AV，需要尺寸更大的输入器件，和尺寸较小的负载器件。但是这也会造成晶体管<strong>输入输出电压曲线的不均衡</strong>以及<strong>较小的输出摆幅</strong>。</p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.010.jpeg"></p><p>此外，我们通过AC分析还可以得到采用二极管连接的PMOS做负载共源级的波特图，如下图所示。</p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.011.jpeg"></p><p>从图中可以看出，随着输入信号的幅度增大，电流增大，幅频特性中的带宽越大，同时最后的曲线也都会趋向一个极限，该极限曲线的-3dB截止频率大约是3×108Hz.</p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.01/2.jpeg"></p><p>从图中可以看出，随着输入信号的幅度增大，相频特性中相位裕度先减小，后增大。同时，相位的最大和最小之差也呈现先减小后增大的变化趋势。</p><p><a name="_toc1724"></a><strong>3.2探究NMOS传“弱1”的相关原理</strong></p><p><a name="_toc18007"></a><strong>3.1.1对于问题的相关解释</strong></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.013.png"></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.014.png"></p><p>如图所示，如果I1的值下降到0的同时，M2的过驱动电压也减小。因此对于小的I1，VGS2≈VTH2, Vout≈VDD−VTH2。实际上，如果ID接近于0，M2的亚阈值电导最终会使Vout&#x3D;VDD，但是当电流很小的时候，<strong>输出结点的有限电容会减缓从</strong>VDD−VTH2<strong>到</strong>VDD<strong>的变化</strong>，图10的右边示意图说明了这个道理。由于这个原因，在具有频繁开关的动作电路中，当电流I1下降到很小的时候，可以大致认为Vout保持在VDD−VTH2附近。</p><p><a name="_toc24274"></a><strong>3.1.1对于问题的仿真验证</strong></p><p>对图5所示的电路进行瞬态分析，图5中所施加的电流源是一个脉冲电流源，在t&#x3D;0时电流会跳变到0，观察输出电压Vout的变化情况，如图11所示。</p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.015.jpeg"></p><p>从图中可以看出，最开始t&#x3D;0时刻的Vout不为0，这是由于在稳定状态下输出结点处的电容与NMOS管会产生一定的分压。可以发现，当Vout≈VDD−VTH2后，Vout受输出节点处的电容影响，上升极为缓慢，<strong>变化趋势为e指数衰减</strong>。可以大致认为Vout保持在VDD−VTH2附近，说明了NMOS传“弱1”的合理性。</p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.016.jpeg"></p><p>从图中可以看出，由于电容不断增加，因此时间常数RC也会变大，达到相同值所需要的时间更长。根据e指数衰减的变化趋势可以发现，电容增大，Vout增长速率越来越慢。最后稳定的值也越来越小。</p><p><a name="_toc1/2264"></a><strong>3.3探究NMOS&#x2F;PMOS做负载的共源级MOS的区别</strong></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.017.jpeg"></p><p><img src="/Aspose.Words.056dbab0-8d59-4e14-bf59-108b78924587.018.jpeg"></p><p>从图可以看出，两者的输入输出电压曲线基本相同，在MOS管刚开启的时候，M1和M2都位于饱和区，Vout随Vin呈现线性下降趋势，当Vin足够大的时候，M1进入线性区，此时的特性曲线为非线性。</p><p>同时，从图中还可以看出，Vin&#x3D;0时，以PMOS为负载的Vout≈1.8V≈VDD，以NMOS为负载的Vout≈1.45V≈VDD−VTH2，这是由于NMOS只能传“弱1”但是PMOS可以传“强1”的结果。</p><ol><li><a name="_toc19391"></a><strong>心得</strong></li></ol><p>从所探究的几个问题中可以看出，大多数的问题都是因为没有弄清楚前提条件和没有全面考虑导致的。比如，增益表达式的矛盾就是因为没有搞清楚在直流工作点还是交流小信号前提条件而产生的。对于NMOS为什么只能传“弱1”的讨论也是因为未能全面考虑输出节点电容导致的。通过问题分析，就可以更清楚地了解NMOS&#x2F;PMOS做负载共源级MOS的区别，为今后更为复杂电路的分析与仿真打下基础。</p>]]></content>
      
      
      <categories>
          
          <category> Analog Circuits Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模集】串并联MOS的分析与仿真</title>
      <link href="/2023/04/01/%E3%80%90%E6%A8%A1%E9%9B%86%E3%80%91%E4%B8%B2%E5%B9%B6%E8%81%94MOS%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
      <url>/2023/04/01/%E3%80%90%E6%A8%A1%E9%9B%86%E3%80%91%E4%B8%B2%E5%B9%B6%E8%81%94MOS%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong></p><p><a href="#_toc13852"><strong>一、 实验内容</strong> </a></p><p><a href="#_toc3655"><strong>二、 实验过程及结果分析</strong></a></p><p><a href="#_toc26359">2.1 实验计算与分析</a></p><p><a href="#_toc13722">2.1.1并联MOS结构的计算与分析     </a></p><p><a href="#_toc28968">2.1.2串联MOS结构的计算与分析</a></p><p><a href="#_toc26359"><strong>2.2 实验仿真与验证</strong></a></p><p><a href="#_toc13722">2.2.1并联结构的仿真与验证</a></p><p><a href="#_toc13722">2.2.2串联结构的仿真与验证 </a></p><p><a href="#_toc26359">2.3 拓展与讨论 </a></p><p><a href="#_toc28458"><strong>三、 实验总结</strong></a></p><p><strong>一、实验内容</strong></p><p>以VG为参数，对于串联和并联的MOS管组合结构，推导IX关于VX的关系式，画出曲线草图和其等效跨导gm的草图，并做仿真，假设λ&#x3D;γ&#x3D;0.</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.003.png" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.003"></p><p><strong>2.实验过程及结果分析</strong></p><p><strong>2.1实验计算与分析</strong></p><p><strong>2.1.1并联MOS结构的计算与分析</strong></p><ol><li>0&lt;VG≤VTHN</li></ol><p>在该条件下图中左边的NMOS不会导通，对右边的PMOS进行分析，通过分类讨论VX与VG的大小关系得到IX、gm与VX的关系式和曲线草图。</p><p>当0&lt;VX&lt;VG+|VTHP|时，PMOS不会导通，IX&#x3D;gm&#x3D;0。</p><p>当VG+|VTHP|&lt;VX时，PMOS导通，IX&#x3D;1&#x2F;2μpCox(W&#x2F;L)p(VX−VG−|VTHP|)^2,此时PMOS位于饱和区，gm&#x3D;−μpCox(W&#x2F;L)p(VX−VG−|VTHP|).</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.004.png" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.004">      </p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.005.png" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.005"></p><ol><li>VG&gt;VTHN</li></ol><p>在该条件下图1（a）中左边的NMOS会导通，，对整体结构进行分析，通过分类讨论VX与VG的大小关系得到IX、gm与VX的关系式和曲线草图。</p><p>当0&lt;VX&lt;VG−VTHN时，NMOS导通位于线性区，PMOS不导通。此时计算出IX&#x3D;μnCox(W&#x2F;L)n((VG−VTHN)VX−1&#x2F;2VX2),gm&#x3D;μnCox(W&#x2F;L)nVX.</p><p>当VG−VTHN&lt;VX&lt;VG+|VTHP|时，NMOS导通位于饱和区，PMOS不导通。此时计算出IX&#x3D;1&#x2F;2μnCox(W&#x2F;L)n(VG−VTHN)^2,gm&#x3D;μnCox(W&#x2F;L)n(VG−VTHN).</p><p>当VG+|VTHP|&lt;VX时,NMOS、PMOS都导通且都处于饱和区，此时计算出IX&#x3D;1&#x2F;2μnCox(W&#x2F;L)n(VG−VTHN)^2+1&#x2F;2μpCox(W&#x2F;L)p(VX−VG−|VTHP|)^2，同理可以求得gm&#x3D;μnCox(W&#x2F;L)n(VG−VTHN)−μpCox(W&#x2F;L)p(VX−VG−|VTHP|).</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.006.png" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.006">   </p><p>  <img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.007.png" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.007"></p><p><strong>2.1.2串联MOS结构的计算与分析</strong></p><ol><li>0&lt;VG≤VTHN</li></ol><p>不存在导通的电路，IX&#x3D;gm&#x3D;0。</p><ol><li>VG&gt;VTHN</li></ol><p>当0&lt;VX&lt;VG+|VTHP|时，PMOS不导通，NMOS导通，此时不存在导通的电路，IX&#x3D;gm&#x3D;0<em>。</em></p><p>当VG+|VTHP|&lt;VX时，此时由于NMOS导通，NMOS和PMOS中间连接处的电压为0，所以此时PMOS必然导通且处于饱和区，而NMOS此时由于VX比较小，仍然处在线性区，当VX足够大的时候，NMOS变到饱和区，现在可以具体计算该临界点处VX的值。</p><p>临界点处有 1&#x2F;2μnCox(W&#x2F;L)n(VG−VTHN)^2&#x3D;1&#x2F;2μpCox(W&#x2F;L)p(VX−VG−|VTHP|)^2，解得VX&#x3D;VG+|VTHP|+α(VG−VTHN), α&#x3D;μn(W&#x2F;L)nμp(W&#x2F;L)p.</p><p>当VG+|VTHP|&lt;VX≤VG+|VTHP|+α(VG−VTHN)，PMOS饱和，NMOS线性，IX&#x3D;1&#x2F;2μpCox(W&#x2F;L)p(VX−VG−|VTHP|)^2,gm&#x3D;−μpCox(W&#x2F;L)p(VX−VG−|VTHP|).</p><p>当VX&gt;VG+|VTHP|+α(VG−VTHN)，PMOS、NMOS都饱和，此时可以计算出IX&#x3D;1&#x2F;2μnCox(W&#x2F;L)n(VG−VTHN)^2,gm&#x3D;μnCox(W&#x2F;L)n(VG−VTHN)，此后gm正向线性增长。</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.008.png" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.008">  <img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.009.png" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.009"></p><p><strong>2.2实验仿真与验证</strong></p><p>采用台积电tsmc0.18um的工艺库，利用Cadence Virtuoso仿真工具进行电路仿真，NMOS和PMOS的参数设置如下表所示。</p><p><strong>表1 MOS晶体管的模型参数</strong></p><table><thead><tr><th align="center">参数</th><th align="center">PMOS</th><th align="center">NMOS</th></tr></thead><tbody><tr><td align="center">Vth(V)</td><td align="center">-0.502</td><td align="center">0.529</td></tr><tr><td align="center">W(um)</td><td align="center">1.5</td><td align="center">1.5</td></tr><tr><td align="center">L(nm)</td><td align="center">180</td><td align="center">180</td></tr><tr><td align="center">Multiplier</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">Fingers</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">γ</td><td align="center">666.67m</td><td align="center">666.67m</td></tr><tr><td align="center">λ</td><td align="center">0.1</td><td align="center">0.2</td></tr></tbody></table><p><strong>2.2.1并联MOS结构的仿真与验证</strong></p><p>并联MOS结构的示意图如图所示，电路工作的基本特性在图中标出。</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.010.png" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.010"></p><p><strong>（1）</strong>0&lt;VG≤VTHN</p><p>利用DC分析，令VG&#x3D;0.1V，将右边的电压源VX进行0V−1.8V的电压扫描，绘制出IX,gm随VX变化的曲线图，如图所示。</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.011.jpeg" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.011"></p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.012.jpeg" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.012"></p><p>图6的结果较好的吻合了预测结果，从图7的结果中可以看出gm随VX变化的曲线与推导出的线性下降趋势有一点差别，这是因为受到了沟道长度调制效应的影响，导致结果并不是纯粹的线性变化。</p><p><strong>（2）</strong>VG&gt;VTHN</p><p>利用DC分析，令VG&#x3D;0.8V，将右边的电压源VX进行0V−1.8V的电压扫描，绘制出IX,gm随VX变化的曲线图，如图所示。</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.013.jpeg" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.013"></p><p>​                  </p><p>从图8中可以看出，IX在中间的变化并不是预测的保持不变，曲线有轻微的上翘趋势，这是由于沟道长度调制效应引起的。</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.014.jpeg" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.014"></p><p>从图中可以看出，gm整体的变化符合预测中先上升后下降的趋势，但是中间的变化并不是预测的保持不变，曲线明显上翘，这是由于沟道长度调制效应引起的gm变化。</p><p><strong>2.2.2串联MOS结构的仿真与验证</strong></p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.015.png" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.015"></p><p><strong>（1）</strong>0&lt;VG≤VTHN</p><p>在该情况下，不存在导通的电路，IX&#x3D;gm&#x3D;0，仿真意义不大。</p><p><strong>（2）</strong>VG&gt;VTHN</p><p>利用DC分析，令VG&#x3D;0.8V，将右边的电压源VX进行0V−1.8V的电压扫描，绘制出IX,gm随VX变化的曲线图，如图所示。</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.016.jpeg" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.016"></p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.017.jpeg" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.017"></p><p>从图发现，IX,gm随VX变化的整体趋势与预测的结果大致符合，但是IX随VX变化在最后并不是一个常数，而是有一定的斜率，这是由于沟道长度调制效应引起的。</p><p><strong>2.3拓展与讨论</strong></p><p>前面的所有实验都是在固定VG的基础上进行探究。我们可以改变VG，绘制不同VG下串联与并联IX随VX变化的曲线族，分析VG对曲线的影响，如图所示。</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.018.jpeg" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.018"></p><p>​         </p><p>并联结构中，可以发现当VG&lt;VTHN时，VG越大，曲线向右平移。当VG&gt;VTHN时，VG越大，曲线中间部分逐渐抬高，IX与VX的关系曲线变为另外一种。当VG从0.5V变为0.6V时，曲线中间部分开始抬高，曲线的类型开始发生改变，这说明VTHN在0.5V-0.6V之间，与实际情况相吻合。</p><p><img src="/Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.019.jpeg" alt="Aspose.Words.954b482b-80bd-4274-b7fd-546f7157b667.019"></p><p>在串联结构中，可以发现当VG&gt;VTHN时，IX在某一个值过后迅速增长，变化剧烈，之后会以小幅度的增长趋势稳定在某一个值附近。并且VG越大，曲线会向右平移，曲线最后稳定的值越大。可以发现当VG≈0.5V时，IX不在为0，开始发生变化，这说明VTHN在0.5V左右，与实际情况吻合。</p><ol start="2"><li><strong>实验总结</strong></li></ol><p>本实验从理论推导上掌握了NMOS和PMOS串联，并联结构的电流，跨导的变化特性，为今后分析更为复杂的电路打下基础。同时，通过本实验还掌握了基本的Cadence Virtuoso仿真软件的使用方法，明确了沟道长度调制效应是如何影响电路的特性，具有一定的意义。</p>]]></content>
      
      
      <categories>
          
          <category> Analog Circuits Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FPGA】基于SMIMS开发板的FDE-Lab</title>
      <link href="/2023/04/01/%E3%80%90FPGA%E3%80%91%E5%9F%BA%E4%BA%8ESMIMS%E5%BC%80%E5%8F%91%E6%9D%BF%E7%9A%84FDE-Lab/"/>
      <url>/2023/04/01/%E3%80%90FPGA%E3%80%91%E5%9F%BA%E4%BA%8ESMIMS%E5%BC%80%E5%8F%91%E6%9D%BF%E7%9A%84FDE-Lab/</url>
      
        <content type="html"><![CDATA[<p>demo: </p><p><a href="https://www.bilibili.com/video/BV1tx4y1A7wZ/?vd_source=3d19a3d894313e266a040f306849e552">https://www.bilibili.com/video/BV1tx4y1A7wZ/?vd_source=3d19a3d894313e266a040f306849e552</a></p><p>Contents</p><p><a href="#_toc10575">Chapter 1 Introduction3</a></p><p><a href="#_toc17173">1.1 The purpose of the experiment3</a></p><p><a href="#_toc12964">1.2 Experimental Procedure of FDE Lab3</a></p><p><a href="#_toc12293">Chapter 2. Name Display Experiment5</a></p><p><a href="#_toc2986">2.1 The Text Display of Name5</a></p><p><a href="#_toc5520">2.1.1 Document Directory5</a></p><p><a href="#_toc6345">2.1.2 Experimental Principle6</a></p><p><a href="#_toc1551">2.1.3 Source Code Design7</a></p><p><a href="#_toc13891">2.2 The Image Display of Name10</a></p><p><a href="#_toc19601">2.2.1 Document Directory10</a></p><p><a href="#_toc11863">2.1.2 Experimental Principle10</a></p><p><a href="#_toc14568">2.2.3 Source Code Design12</a></p><p><a href="#_toc21801">Chapter 3. Aerial Combat Game20</a></p><p><a href="#_toc7907">3.1 Document Directory20</a></p><p><a href="#_toc19591">3.2 Game Introduction20</a></p><p><a href="#_toc30801">3.3 Source Code Structure21</a></p><p><a href="#_toc21041">Chapter 4. Experiment Summary31</a></p><p><a href="#_toc7697">4.1 Experiment Summary31</a></p><p><a href="#_toc21012">Chapter 5. References32</a></p><p><a href="#_toc24617">Chapter 6. Appendices33</a></p><h1 id="Chapter-1-Introduction"><a href="#Chapter-1-Introduction" class="headerlink" title="Chapter 1 Introduction"></a><a name="_toc10575"></a><strong>Chapter 1 Introduction</strong></h1><h2 id="1-1-The-purpose-of-the-experiment"><a href="#1-1-The-purpose-of-the-experiment" class="headerlink" title="1.1 The purpose of the experiment"></a><a name="_toc101298135"></a><a name="_toc100180913"></a><a name="_toc17173"></a><strong>1.1 The purpose of the experiment</strong></h2><p>Through various experiments in FDE Lab, I gradually master the specific steps of digital circuit design, be familiar with the use of SMIMS and Wonton software, and understand the workflow of Yosys and DC, such as compiling, packing, placing, routing and generating bit files. By writing Verilog files, I am familiar with top-down design methods, test document writing and waveform viewing. The mastery of these knowledge will be of great help to the later embedded experiments.</p><h2 id="1-2-Experimental-Procedure-of-FDE-Lab"><a href="#1-2-Experimental-Procedure-of-FDE-Lab" class="headerlink" title="1.2 Experimental Procedure of FDE Lab"></a><a name="_toc100180914"></a><a name="_toc101298136"></a><a name="_toc12964"></a><strong>1.2 Experimental Procedure of FDE Lab</strong></h2><p>Firstly, the design source file is written by Vivado software developed by AMD Xilinx Company. By writing testbench files, we can verify the functions of source files through behavior level simulation. In order to ensure the reliability of the design source file, we can also conduct  post synthesis simulation again after synthesis steps to verify the correctness of timing and functions.</p><p>Secondly, we can compile the design source file through Yosys or DC. After the compilation is complete, we can use the FDE2019 software to complete a work flow, such as packing, placing, routing, and generating bit files. It is worth noting that the SMIMS HDLAutoAssign tool should be used to generate pin constraint files in advance during the placing and routing process.</p><p>Finally, Wonton interactive software is used to control each input and output component. When creating a new project, it is necessary to add the previously generated pin constraint file, connect the FDE development board after adding the bitstream file, and set the clock frequency after programming. After setting this up, the output component can perform a series of operations by controlling the input component.</p><p>Next, I will introduce some specific process of digital circuit design:</p><ul><li><strong>Packing</strong></li></ul><p>The packing step in digital circuit design is the process of grouping logical components and interconnect wires into physical entities called modules or cells.</p><p>The following are the typical steps involved in the packing step of digital circuit design:</p><ul><li><strong>Module generation:</strong> The first step is to group related components into modules. This is done based on the functionality of the components and the design hierarchy. The modules can be pre-designed blocks or they can be created during the packing step.</li><li><strong>Cell generation:</strong> In this step, the modules are transformed into physical cells. Each cell contains one or more modules and associated interconnect wires. The cells are generated using a cell generation tool, which takes into account the placement of the components and the design rules specified by the manufacturer.</li><li><strong>Cell placement:</strong> Once the cells are generated, they are placed on the chip or PCB. The placement takes into account the location of the input&#x2F;output pins and the interconnect wires between the cells.</li></ul><p>Overall, the packing step in digital circuit design is a critical part of the design process, as it determines the physical grouping of components and interconnect wires into cells or modules. This can have a significant impact on the performance and reliability of the circuit</p><ul><li><strong>Placing</strong></li></ul><p>The placement step in digital circuit design is the process of determining the physical location of each logic gate, flip-flop, and other components on a chip or printed circuit board (PCB). The goal of the placement step is to minimize the length of interconnect wires and optimize the performance of the circuit.</p><p>The following are the typical steps involved in the placement step of digital circuit design:</p><ul><li><strong>Netlist generation:</strong> The first step is to generate a netlist, which is a list of all the components in the design and their connections. This is typically done using a computer-aided design (CAD) tool.</li><li><strong>Floorplanning:</strong> In this step, the designer allocates space for each component on the chip or PCB. This involves deciding on the overall size of the chip, the location of the input&#x2F;output pins, and the placement of other components.</li><li><strong>Placement:</strong> Once the floorplan is complete, the designer uses a placement tool to place the components on the chip or PCB. The placement tool takes into account the location of the input&#x2F;output pins, the size and shape of the components, and any design rules specified by the manufacturer.</li></ul><p>To summarize, the placement step in digital circuit design determines the physical layout of the circuit and can have a significant impact on its performance.</p><ul><li><strong>Routing</strong></li></ul><p>The routing step in digital circuit design is the process of determining the physical paths for interconnect wires that connect the various cells or modules of a circuit. The goal of the routing step is to minimize the total length of interconnect wires while meeting the timing, area, and power constraints of the design.</p><p>The following are the typical steps involved in the routing step of digital circuit design:</p><ul><li><strong>Routing grid generation:</strong> In this step, a routing grid is created over the cells or modules of the circuit. The routing grid is a matrix of cells that represent the physical space available for routing wires between the cells.</li><li><strong>Global routing:</strong> In this step, a global router is used to determine the approximate paths for the interconnect wires between the cells. The global router takes into account the placement of the cells, the routing grid, and the design constraints.</li><li><strong>Detailed routing:</strong> Once the approximate paths for the interconnect wires have been determined, a detailed router is used to refine the paths and to optimize the routing. The detailed router takes into account the specific physical characteristics of the interconnect wires, such as their width and spacing, and the design constraints.</li></ul><p>All in all, the routing step determines the physical paths for interconnect wires that connect the various cells or modules of a circuit. This can have a significant impact on the performance, area, and power consumption of the circuit.</p><h1 id="Chapter-2-Name-Display-Experiment"><a href="#Chapter-2-Name-Display-Experiment" class="headerlink" title="Chapter 2. Name Display Experiment"></a><a name="_toc100180915"></a><a name="_toc101298137"></a><a name="_toc12293"></a><strong>Chapter 2. Name Display Experiment</strong></h1><p>The experiment of name display is mainly divided into two parts, respectively LED text display and LED image display. Compared to LED text display, LED image display is more complex, it needs to use more complex state machine and dynamic scanning knowledge.</p><h2 id="2-1-The-Text-Display-of-Name"><a href="#2-1-The-Text-Display-of-Name" class="headerlink" title="2.1 The Text Display of Name"></a><a name="_toc101298143"></a><a name="_toc2986"></a><a name="_toc100180921"></a><strong>2.1 The Text Display of Name</strong></h2><h3 id="2-1-1-Document-Directory"><a href="#2-1-1-Document-Directory" class="headerlink" title="2.1.1 Document Directory"></a><a name="_toc5520"></a><a name="_toc100180922"></a><a name="_toc101298144"></a><strong>2.1.1 Document Directory</strong></h3><p>The table below shows the file directories in the Lab1 text folder.</p><p><strong>Table.1 Related Files of the Text Display in Lab1 Text Folder</strong></p><table><thead><tr><th align="center"><code> </code><strong>Name</strong></th><th align="center"><strong>Specific content</strong></th></tr></thead><tbody><tr><td align="center"><p></p><p></p><p>ZTY_name_display2_FDE</p></td><td align="center"><p>1. Source files</p><p>2. Generated bit files </p><p>3. Yosys compiled files</p><p>4. Packed, placed, and routed files</p><p>5. Pin constraint files.</p></td></tr><tr><td align="center"><p></p><p>demo</p></td><td align="center"><p>1. Demo videos</p><p>2. Demo pictures</p><p>3. Waveform pictures</p></td></tr><tr><td align="center">tb_wave</td><td align="center"><p>1. Testbench file</p><p>2. Waveform file</p></td></tr><tr><td align="center">vivado_zty_word_display</td><td align="center"><p>1. Vivado project file</p><p>2. Vivado source files</p><p>3. Vivado simulation files</p></td></tr><tr><td align="center">ZTY_name_display2_Wonton</td><td align="center"><code>    </code>Wonton project files</td></tr></tbody></table><h3 id="2-1-2-Experimental-Principle"><a href="#2-1-2-Experimental-Principle" class="headerlink" title="2.1.2 Experimental Principle"></a><a name="_toc6345"></a><a name="_toc100180923"></a><a name="_toc101298145"></a><strong>2.1.2 Experimental Principle</strong></h3><p>The name display takes advantage of the LED text display module in Wonton. The LCD module has its display starting at the top left corner, where the first character is shown. As each character is displayed, the display address automatically moves to the next position. Once all 32 addresses (2 rows of 16 characters) are written, the character data in the initial position is overwritten in a cyclic manner. Additionally, the user manual provides the corresponding hexadecimal codes for letters, symbols, and numbers.</p><p>The component picture and the functions of the various I&#x2F;O ports are shown below. </p><p><strong>Table.2 Different Port Functions</strong></p><table><thead><tr><th align="center"><strong>Port</strong></th><th align="center"><strong>Function</strong></th></tr></thead><tbody><tr><td align="center"><strong>DB0~DB7</strong></td><td align="center"><strong>Input data</strong></td></tr><tr><td align="center"><p></p><p><strong>RS</strong></p></td><td align="center"><p><strong>Register select</strong></p><p>When it is 0, the instruction register is selected</p><p><code> </code>When it is 1, the data register is selected</p></td></tr><tr><td align="center"><p></p><p><strong>RW</strong></p></td><td align="center"><p><strong>Read&#x2F;Write</strong></p><p>When it is 0, a write operation is performed </p><p>When it is 1, no operation is performed</p></td></tr><tr><td align="center"><strong>EN</strong></td><td align="center">Data is transferred on the falling edge of EN</td></tr><tr><td align="center"><p></p><p><strong>RST</strong></p></td><td align="center"><p><strong>RESET</strong></p><p>When it is 1, all display data is cleared and the cursor is moved to the initial position (top left corner).</p></td></tr></tbody></table><p><img src="/%E3%80%90FPGA%E3%80%91%E5%9F%BA%E4%BA%8ESMIMS%E5%BC%80%E5%8F%91%E6%9D%BF%E7%9A%84FDE-Lab%5CAspose.Words.edf023e3-7755-4ecb-a3b3-627145557c7f.003.png" alt="Aspose.Words.edf023e3-7755-4ecb-a3b3-627145557c7f.003"></p><p><strong>Figure.2 The Time Sequence Working Mode</strong></p><p>Each character in the LED text display adopts the encoding rule of ASCII code, and each character corresponds to a hexadecimal code.</p><h3 id="2-1-3-Source-Code-Design"><a href="#2-1-3-Source-Code-Design" class="headerlink" title="2.1.3 Source Code Design"></a><a name="_toc1551"></a><strong>2.1.3 Source Code Design</strong></h3><p>Part of the sequential logic code is shown here, which is the key to led text display.</p><p><strong>Code.1 Partial Text Display of Sequential Logic Code</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">*<span class="comment">// for text led display* </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> iClk)</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(oLcdRst)</span><br><span class="line"></span><br><span class="line">`        `countlcd    &lt;=  <span class="number">8&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span> if(countlimit)</span></span><br><span class="line"></span><br><span class="line">`        `countlcd    &lt;=  countlcd;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">`        `countlcd    &lt;=  countlcd + <span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> iClk)</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(oLcdRst)</span><br><span class="line"></span><br><span class="line">`        `oLcdRw  &lt;=  <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span> if(countlimit)</span></span><br><span class="line"></span><br><span class="line">`        `oLcdRw  &lt;=  <span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span>  oLcdRst =   iRst || iButton2 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span>  oLcdRs  =   <span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span>  countlimit = (countlcd == <span class="number">8&#x27;d255</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span>  oLcdEn = ~countlcd[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(countlcd[<span class="number">3</span>] <span class="keyword">or</span> countlcd[<span class="number">4</span>] <span class="keyword">or</span> countlcd[<span class="number">5</span>] <span class="keyword">or</span> countlcd[<span class="number">6</span>] <span class="keyword">or</span> countlcd[<span class="number">7</span>] )</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">case</span>(countlcd[<span class="number">7</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d0</span>    :   oLcdData    &lt;=  WORD0 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d1</span>    :   oLcdData    &lt;=  WORD1 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d2</span>    :   oLcdData    &lt;=  WORD2 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d3</span>    :   oLcdData    &lt;=  WORD3 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d4</span>    :   oLcdData    &lt;=  WORD4 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d5</span>    :   oLcdData    &lt;=  WORD5 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d6</span>    :   oLcdData    &lt;=  WORD6 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d7</span>    :   oLcdData    &lt;=  WORD7 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d8</span>    :   oLcdData    &lt;=  WORD8 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d9</span>    :   oLcdData    &lt;=  WORD9 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d10</span>   :   oLcdData    &lt;=  WORD10;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d11</span>   :   oLcdData    &lt;=  WORD11;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d12</span>   :   oLcdData    &lt;=  WORD12;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d13</span>   :   oLcdData    &lt;=  WORD13;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d14</span>   :   oLcdData    &lt;=  WORD14;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d15</span>   :   oLcdData    &lt;=  WORD15;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d16</span>    :   oLcdData    &lt;=  WORD16 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d17</span>    :   oLcdData    &lt;=  WORD17 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d18</span>    :   oLcdData    &lt;=  WORD18 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d19</span>    :   oLcdData    &lt;=  WORD19 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d20</span>    :   oLcdData    &lt;=  WORD20 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d21</span>    :   oLcdData    &lt;=  WORD21 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d22</span>    :   oLcdData    &lt;=  WORD22 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d23</span>    :   oLcdData    &lt;=  WORD23 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d24</span>    :   oLcdData    &lt;=  WORD24 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d25</span>    :   oLcdData    &lt;=  WORD25 ;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d26</span>   :   oLcdData    &lt;=  WORD26;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d27</span>   :   oLcdData    &lt;=  WORD27;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d28</span>   :   oLcdData    &lt;=  WORD28;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d29</span>   :   oLcdData    &lt;=  WORD29;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d30</span>   :   oLcdData    &lt;=  WORD30;</span><br><span class="line"></span><br><span class="line">`        `<span class="number">5&#x27;d31</span>   :   oLcdData    &lt;=  WORD31;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">endcase</span></span><br></pre></td></tr></table></figure><p>The code consists of a series of always blocks and assign statements. The first always block is triggered on the positive edge of the input clock signal (iClk). It includes an if-else statement that checks the state of the oLcdRst signal, which is used to reset the LED display. If the oLcdRst signal is high, then the countlcd variable is set to 0. If the countlimit condition is met, then the countlcd variable is not updated. Otherwise, the countlcd variable is incremented by 1.</p><p>The second always block is also triggered on the positive edge of the input clock signal (iClk). It updates the oLcdRw signal, which is used to control the read&#x2F;write operations of the LED display. If the oLcdRst signal is high, then the oLcdRw signal is set to 0 (write operation). If the countlimit condition is met, then the oLcdRw signal is set to 1 (no operation).</p><p>The assign statements are used to assign values to various signals. The oLcdRst signal is assigned the logical OR of the iRst and iButton2 signals. The oLcdRs signal is always set to 1, indicating that the data being transferred is a character data. The countlimit signal is assigned based on the value of the countlcd variable. It is set to 1 when the countlcd variable is equal to 255. The oLcdEn signal is assigned the complement of the bit at position 2 in the countlcd variable.</p><p>The final always block is triggered by changes in the countlcd variable. It uses a case statement to assign values to the oLcdData signal based on the value of the countlcd variable. The oLcdData signal represents the data being transferred to the LED display.</p><h2 id="2-2-The-Image-Display-of-Name"><a href="#2-2-The-Image-Display-of-Name" class="headerlink" title="2.2 The Image Display of Name"></a><a name="_toc13891"></a><strong>2.2 The Image Display of Name</strong></h2><h3 id="2-2-1-Document-Directory"><a href="#2-2-1-Document-Directory" class="headerlink" title="2.2.1 Document Directory"></a><a name="_toc19601"></a><strong>2.2.1 Document Directory</strong></h3><p>The table below shows the file directories in the Lab1 image folder.</p><p><strong>Table.3 Related Files of the Text Display in Lab1 Image Folder</strong></p><table><thead><tr><th align="center"><code> </code><strong>Name</strong></th><th align="center"><strong>Specific content</strong></th></tr></thead><tbody><tr><td align="center"><p></p><p></p><p>ZTY_name_display_FDE</p></td><td align="center"><p>1. Source files</p><p>2. Generated bit files </p><p>3. Yosys compiled files</p><p>4. Packed, placed, and routed files</p><p>5. Pin constraint files.</p></td></tr><tr><td align="center"><p></p><p>demo</p></td><td align="center"><p>1. Demo videos</p><p>2. Demo pictures</p><p>3. Waveform pictures</p></td></tr><tr><td align="center">tb_simulation</td><td align="center"><p>1. Testbench file</p><p>2. Waveform file</p></td></tr><tr><td align="center">vivado_zty_image_display</td><td align="center"><p>1.Vivado project file</p><p>2.Vivado source files</p><p>3.Vivado simulation files</p></td></tr><tr><td align="center">ZTY_name_display_Wonton</td><td align="center"><code>    </code>Wonton project files</td></tr></tbody></table><h3 id="2-1-2-Experimental-Principle-1"><a href="#2-1-2-Experimental-Principle-1" class="headerlink" title="2.1.2 Experimental Principle"></a><a name="_toc11863"></a><strong>2.1.2 Experimental Principle</strong></h3><p>The LED image display uses LED image display in the Wonton software, as shown in the figure below.</p><p><strong>Figure.5 LED Image Display</strong></p><p>The <a name="_hlk100179067"></a>port of this component is defined as shown in the following table.</p><table><thead><tr><th align="center">Port</th><th align="center">Function</th></tr></thead><tbody><tr><td align="center">DB0~DB7</td><td align="center">Data input</td></tr><tr><td align="center"><p></p><p>DI</p><p></p></td><td align="center"><p>Register selection port</p><p>0: Enter command mode (select command register)</p><p>1: Enter data mode (select data bits register)</p></td></tr><tr><td align="center"><p></p><p>RW</p><p></p></td><td align="center"><p>Read&#x2F;Write</p><p>0: write data</p><p>1: No operation</p></td></tr><tr><td align="center">EN</td><td align="center">Enable signal. Data incoming port on negedge</td></tr><tr><td align="center">CS1</td><td align="center">Left half screen</td></tr><tr><td align="center">CS2</td><td align="center">Right half screen</td></tr><tr><td align="center">RST</td><td align="center">Clear the data in the display and mem</td></tr></tbody></table><p><strong>Table.4 the Port of this Component</strong></p><p>The device has an overall pixel resolution of 128x64, which is divided into two 64x64 screens. Each screen is made up of eight 64x8 small screens, with x and y-axis address coordinates shown in the provided figure. When data is written to the memory (MEM), the Y-coordinate automatically moves to the next position, and resets to 0 when Y&#x3D;63.</p><p>For generating specific text pixels, the pctolcd2002 software is used. The displayed text and pixel generation for this experiment are shown in the figure.</p><p>To display a word, both the left and right screens are divided into 8-bit x 8 pixels on the x-axis and 64 pixels on the y-axis. An 8-bit x 64 MEM is built into the LED, so 8 pages need to be lit. Each page is illuminated for 68 clock cycles, with the start display address set in cycle 1, the page set in cycle 2, and the Y address set in cycle 3. Cycles 4 to 67 load data into MEM (with one row of data (1 x 8) loaded in each cycle), and cycle 68 illuminates that segment of the screen. Therefore, to display each word, 68 x 8 &#x3D; 544 cycles are required.</p><h3 id="2-2-3-Source-Code-Design"><a href="#2-2-3-Source-Code-Design" class="headerlink" title="2.2.3 Source Code Design"></a><a name="_toc14568"></a><strong>2.2.3 Source Code Design</strong></h3><ul><li><strong>Generate Current Display</strong></li></ul><p><strong>Code.2 Generate Current Display</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clock)</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">if</span>(<span class="keyword">input</span>\_rst)</span><br><span class="line"></span><br><span class="line">`    `current\_display &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`  <span class="meta">`<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">2</span> || current\_state == <span class="number">5</span> || current\_state == <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_display &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">if</span>(count\_clock == <span class="number">68</span></span><br><span class="line"></span><br><span class="line">`        `||count\_clock == <span class="number">136</span></span><br><span class="line"></span><br><span class="line">`        `||count\_clock == <span class="number">204</span></span><br><span class="line"></span><br><span class="line">`        `||count\_clock == <span class="number">272</span></span><br><span class="line"></span><br><span class="line">`        `||count\_clock == <span class="number">340</span></span><br><span class="line"></span><br><span class="line">`        `||count\_clock == <span class="number">408</span></span><br><span class="line"></span><br><span class="line">`        `||count\_clock == <span class="number">476</span></span><br><span class="line"></span><br><span class="line">`        `||count\_clock == <span class="number">544</span></span><br><span class="line"></span><br><span class="line">`        `)</span><br><span class="line"></span><br><span class="line">`            `current\_display &lt;= current\_display + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code is describing the functionality of an always block that is triggered on the positive edge of a clock signal. It first checks whether an input reset signal is active, and if so, sets the “current_display” variable to 0. Otherwise, it proceeds with additional checks.</p><p>If the current state is 2, 5, or 8, “current_display” is set to 0. However, if the count_clock value matches one of the specified clock cycle values (68, 136, 204, 272, 340, 408, 476, or 544), “current_display” is incremented by 1.</p><p>Essentially, this code is responsible for updating the “current_display” variable based on certain conditions related to the current state and clock cycle count.</p><ul><li><strong>Generate Count Clock</strong></li></ul><p><strong>Code.3 Generate Count Clock</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clock)</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">if</span>(<span class="keyword">input</span>\_rst)</span><br><span class="line"></span><br><span class="line">`        `count\_clock &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`  <span class="meta">`<span class="keyword">else</span> begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>((current\_state == <span class="number">0</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`    `|| (current\_state == <span class="number">1</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`    `|| (current\_state == <span class="number">2</span> &amp;&amp; count\_clock == <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">`    `|| (current\_state == <span class="number">3</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`    `|| (current\_state == <span class="number">4</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`    `|| (current\_state == <span class="number">5</span> &amp;&amp; count\_clock == <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">`    `|| (current\_state == <span class="number">6</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`    `|| (current\_state == <span class="number">7</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`    `|| (current\_state == <span class="number">8</span> &amp;&amp; count\_clock == <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">`    `)</span><br><span class="line"></span><br><span class="line">`        `count\_clock &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">`        `count\_clock &lt;= count\_clock + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">End</span><br></pre></td></tr></table></figure><p>This code is describing the functionality of an always block that is triggered on the positive edge of a clock signal. It first checks whether an input reset signal is active, and if so, sets the “current_state” variable to 0. Otherwise, it proceeds with additional checks.</p><p>If the current state is 0 and the count_clock value is equal to 544, “current_state” is incremented by 1. This same logic is applied for each of the following states: 1, 2, 3, 4, 5, 6, and 7. However, if the current state is 8 and the count_clock value is equal to 500, “current_state” is set back to 0.</p><p>Essentially, this code is responsible for updating the “current_state” variable based on certain conditions related to the current state and clock cycle count. These conditions are used to control the timing and sequencing of the LED display in the overall system.</p><ul><li><strong>Generate Current State</strong></li></ul><p><strong>Code.4 Generate Current State</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clock)</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">if</span>(<span class="keyword">input</span>\_rst)</span><br><span class="line"></span><br><span class="line">`    `current\_state &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`  <span class="meta">`<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">0</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_state &lt;= current\_state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">1</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_state &lt;= current\_state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">2</span> &amp;&amp; count\_clock == <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_state &lt;= current\_state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">3</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_state &lt;= current\_state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">4</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_state &lt;= current\_state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">5</span> &amp;&amp; count\_clock == <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_state &lt;= current\_state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">6</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_state &lt;= current\_state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">7</span> &amp;&amp; count\_clock == <span class="number">544</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_state &lt;= current\_state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(current\_state == <span class="number">8</span> &amp;&amp; count\_clock == <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">`        `current\_state &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code is describing the functionality of an always block that is triggered on the positive edge of a clock signal. It first checks whether an input reset signal is active, and if so, sets the “current_state” variable to 0. Otherwise, it proceeds with additional checks.</p><p>If the current state is 0 and the count_clock value is equal to 544, “current_state” is incremented by 1. This same logic is applied for each of the following states: 1, 2, 3, 4, 5, 6, and 7. However, if the current state is 8 and the count_clock value is equal to 500, “current_state” is set back to 0.</p><ul><li><strong>Generate Current DI</strong></li></ul><p><strong>Code.5 Generate Current DI</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clock)</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">if</span>(<span class="keyword">input</span>\_rst)</span><br><span class="line"></span><br><span class="line">`    `current\_di &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`  <span class="meta">`<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(count\_clock == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">67</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">135</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">203</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">271</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">339</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">407</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">475</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">543</span></span><br><span class="line"></span><br><span class="line">`    `)</span><br><span class="line"></span><br><span class="line">`        `current\_di &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(count\_clock == <span class="number">3</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">71</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">139</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">207</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">275</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">343</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">411</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">479</span></span><br><span class="line"></span><br><span class="line">`    `)</span><br><span class="line"></span><br><span class="line">`        `current\_di &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code is describing an always block that is triggered on the positive edge of a clock signal. It first checks whether an input reset signal is active, and if so, sets the “current_di” variable to 0. Otherwise, it proceeds with additional checks.</p><p>If the “count_clock” value is equal to 0, 67, 135, 203, 271, 339, 407, 475, or 543, “current_di” is set to 0. If the “count_clock” value is equal to 3, 71, 139, 207, 275, 343, 411, or 479, “current_di” is set to 1.</p><ul><li><strong>Generate r_cs</strong></li></ul><p><strong>Code.6 Generate r_cs</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clock)</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">case</span>(current\_state)</span><br><span class="line"></span><br><span class="line">`  `<span class="number">&#x27;d0</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">0</span>;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="number">&#x27;d1</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">1</span>;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="number">&#x27;d2</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">0</span>;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="number">&#x27;d3</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">0</span>;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="number">&#x27;d4</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">1</span>;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="number">&#x27;d5</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">0</span>;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="number">&#x27;d6</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">0</span>;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="number">&#x27;d7</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">1</span>;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="number">&#x27;d8</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">0</span>;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">default</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`      `r\_cs1 &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`      `r\_cs2 &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`  `<span class="keyword">endcase</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code uses a case statement to determine the appropriate chip select signal to activate for the current state. The signals r_cs1 and r_cs2 are assigned different values based on the current state. This code is used to control the display of specific text on the two-screen LCD display.</p><ul><li><strong>Generate Data</strong></li></ul><p><strong>Code.7 Generate Data</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clock) </span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(<span class="keyword">input</span>\_rst)</span><br><span class="line"></span><br><span class="line">`        `r\_db =  <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(count\_clock == <span class="number">68</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">136</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">204</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">272</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">340</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">408</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">476</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">544</span></span><br><span class="line"></span><br><span class="line">`    `)</span><br><span class="line"></span><br><span class="line">`        `r\_db =  <span class="number">8&#x27;b00111110</span>;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span> if(count\_clock == 1</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">69</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">137</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">205</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">273</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">341</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">409</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">477</span></span><br><span class="line"></span><br><span class="line">`    `)</span><br><span class="line"></span><br><span class="line">`        `r\_db =  <span class="number">8&#x27;b11000000</span>;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span> if(count\_clock == 2</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">70</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">138</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">206</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">274</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">342</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">410</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">478</span></span><br><span class="line"></span><br><span class="line">`    `)</span><br><span class="line"></span><br><span class="line">`        `r\_db =  &#123;<span class="number">5&#x27;b10111</span>, current\_display&#125;;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span> if(count\_clock == 3</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">71</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">139</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">207</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">275</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">343</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">411</span></span><br><span class="line"></span><br><span class="line">`    `||count\_clock == <span class="number">479</span></span><br><span class="line"></span><br><span class="line">`    `)</span><br><span class="line"></span><br><span class="line">`        `r\_db =  <span class="number">8&#x27;b01000000</span>;</span><br><span class="line"></span><br><span class="line">`    <span class="meta">`<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">case</span>(current\_state)</span><br><span class="line"></span><br><span class="line">`    `<span class="number">0</span>:<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">case</span>(count\_clock)</span><br><span class="line"></span><br><span class="line"><span class="number">&#x27;d4</span>: r\_db = <span class="number">&#x27;h0</span>;</span><br><span class="line"></span><br><span class="line">` `<span class="number">&#x27;d5</span>: r\_db = <span class="number">&#x27;h0</span>;</span><br><span class="line"></span><br><span class="line">` `<span class="number">&#x27;d6</span>: r\_db = <span class="number">&#x27;h0</span>;</span><br><span class="line"></span><br><span class="line">` `<span class="number">&#x27;d7</span>: r\_db = <span class="number">&#x27;h0</span>;</span><br><span class="line"></span><br><span class="line">` `<span class="number">&#x27;d8</span>: r\_db = <span class="number">&#x27;h0</span>;</span><br><span class="line"></span><br><span class="line">` `<span class="number">&#x27;d9</span>: r\_db = <span class="number">&#x27;h0</span>;</span><br><span class="line"></span><br><span class="line">` `<span class="number">&#x27;d10</span>: r\_db = <span class="number">&#x27;h0</span>;</span><br><span class="line"></span><br><span class="line">**······<span class="comment">//leave out the data because it is very large**</span></span><br></pre></td></tr></table></figure><p>The code checks for a reset signal and sets the value of “r_db” accordingly. If the reset signal is not asserted, the code checks the value of “count_clock” and sets “r_db” to a specific value based on its value and the current state of the circuit.</p><p>The code uses a case statement to set the value of “r_db” based on the current state of the circuit and the value of “count_clock”. If “count_clock” is not equal to any of the specified values, the code falls through to the default case. The values assigned to “r_db” in each case are expressed in hexadecimal notation.</p><h1 id="Chapter-3-Aerial-Combat-Game"><a href="#Chapter-3-Aerial-Combat-Game" class="headerlink" title="Chapter 3. Aerial Combat Game"></a><a name="_toc21801"></a><strong>Chapter 3. Aerial Combat Game</strong></h1><ol><li><h2 id="Document-Directory"><a href="#Document-Directory" class="headerlink" title="Document Directory"></a><a name="_toc7907"></a><strong>Document Directory</strong></h2>The table below shows the file directories in the Lab2 aerial combat folder.</li></ol><p><strong>Table.5 Related Files of the Text Display in Lab1 Image Folder</strong></p><table><thead><tr><th align="center"><code> </code><strong>Name</strong></th><th align="center"><strong>Specific content</strong></th></tr></thead><tbody><tr><td align="center"><p></p><p></p><p>aerial_combat_FDE_yosys</p></td><td align="center"><p>1.Source files</p><p>2.Generated bit files </p><p>3.Yosys compiled files</p><p>4.Packed, placed, and routed files</p><p>5.Pin constraint files.</p></td></tr><tr><td align="center">demo</td><td align="center"><p>1.Demo videos</p><p>2.Waveform pictures and files</p></td></tr><tr><td align="center">tb_simulation</td><td align="center"><p>1.Testbench file</p><p>2.Waveform file</p></td></tr><tr><td align="center"><p></p><p>vivado_project_plane</p></td><td align="center"><p>1.Vivado project file</p><p>2.Vivado source files</p><p>3.Vivado simulation files</p></td></tr><tr><td align="center">aerial_combat_Wonton</td><td align="center"><code>    </code>Wonton project files</td></tr></tbody></table><ol><li><h2 id="Game-Introduction"><a href="#Game-Introduction" class="headerlink" title="Game Introduction"></a><a name="_toc100180928"></a><a name="_toc19591"></a><a name="_toc101298150"></a><strong>Game Introduction</strong></h2></li></ol><p>The whole game is implemented through Wonton software. The game is mainly divided into the following parts, respectively is the control of the start of the game switch, the control of the aircraft movement and shooting button, the game interface display, the score of the seven sections of the digital tube display and LED display.</p><p><strong>Here are the rules of the game:</strong></p><p>1. Enemy plane is falling from the top of the screen, and our plane is at the bottom at first.</p><p>2. The up, down, left and right movements of the aircraft are controlled by the four buttons.</p><p>3. The button in the middle controls the aircraft to shoot upward. When the bullet hits the enemy aircraft, the bullet and the enemy aircraft disappear from the current position and the enemy aircraft refreshes from the top of the screen.</p><p>4. The initial score is 1 point. Bonus points are awarded after hitting an enemy plane, for a total of 8 points. The higher the score, the more leds are lit below.When all the LED lights are on, that is, after shooting down 8 enemy aircraft, the game is won.</p><p>5. If our plane collides with the enemy plane, the game fails.</p><ol><li><h2 id="Source-Code-Structure"><a href="#Source-Code-Structure" class="headerlink" title="Source Code Structure"></a><a name="_toc30801"></a><strong>Source Code Structure</strong></h2></li></ol><p>The overall framework of the game, shown here, is designed from the top down. </p><p>First of all, the top layer of the entire game becomes the bridge between the various modules of data transmission. The input of the top module is the clock signal, reset signal and signal related to mobile shooting, and the output is the row selection signal and column selection signal of the LED16*16 array, as well as the signal of the control LED and seven segment tube.</p><p>The clock_divider module is used to divide the clock frequency. Since dynamic scanning of the LED matrix and game running require different clock frequencies, the clock_divier module generates a clk_out signal that is slower than the original clk signal and feeds it to the game_logic module, LED_score_display module and seven_segment module. The dynamically scanned display module still uses the clk signal with the original faster frequency.</p><p>The game control module controls the game. The game control module includes control of aircraft and bullet movement, collision determination and game_matrix update. game_matrix is equivalent to a RAM that is flushed every clock cycle. The game_matrix data will be fed to the dynamically scanned display module, which is used to generate row selection signals and column selection signals to control the LED matrix. In addition, the game control module also generates scores, which are fed to the LED_score_display module and the seven_segment module to generate the final score.</p><p><strong>In general, the overall design framework adopts the MVC(Model-View-Controller) design pattern.</strong> The game_marix matrix stores information about aircraft and bullet models. Dynamic scanning of LED matrix, seven sections of digital tube and LED display game interface and score effect.Finally through game_logic module we can control the game.</p><ul><li>Clock_divider</li></ul><p><strong>Code.7 Clock_divider</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> **clk\_divider** (</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> rst\_n,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">output</span> <span class="keyword">reg</span> clk\_out</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> [<span class="number">23</span>:<span class="number">0</span>] counter = <span class="number">24&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst\_n) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">if</span> (!rst\_n) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `counter &lt;= <span class="number">24&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`            `clk\_out &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (counter == <span class="number">24&#x27;d10</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `counter &lt;= <span class="number">24&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`                `clk\_out &lt;= ~clk\_out;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `counter &lt;= counter + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>This code describes a clock divider module. The module takes an input clock signal and produces an output clock signal that is divided by a factor of 10.</p><p>The code uses an “always” block that is triggered by a positive edge of the input clock signal or a negative edge of the reset signal. Inside the “always” block, the code checks the value of the reset signal. If the reset signal is asserted, the counter and output clock signals are reset to 0. If the reset signal is not asserted, the code increments the counter by 1 on each clock cycle. When the counter reaches a value of 10, the counter is reset to 0 and the output clock signal is toggled.</p><ul><li>Display</li></ul><p><strong>Code.8 Display module</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> **display** (</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> rst\_n,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">255</span>:<span class="number">0</span>] game\_matrix,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>] row\_sel,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>] col\_sel</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] row\_counter = <span class="number">4&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst\_n) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">if</span> (!rst\_n) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `row\_counter &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`            `row\_sel &lt;= <span class="number">16&#x27;h0001</span>;</span><br><span class="line"></span><br><span class="line">`            `col\_sel &lt;= <span class="number">16&#x27;h0000</span>;</span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (row\_counter == <span class="number">4&#x27;d15</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `row\_counter &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`                `row\_sel &lt;= <span class="number">16&#x27;h0001</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `row\_counter &lt;= row\_counter + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`                `row\_sel &lt;= row\_sel &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`            `col\_sel &lt;= game\_matrix[<span class="number">16\*</span>row\_counter +: <span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>This code defines a module for a display driver that generates output signals to drive a display based on an input game matrix. The module takes an input game matrix represented as a 256-bit signal, an input clock signal, and a reset signal. The module produces two 16-bit output signals, row_sel and col_sel, which are used to drive the row and column select lines of the display.  </p><p>The row_sel output signal is generated by shifting a binary value to select one row of the display at a time. The row counter is used to keep track of which row is currently being selected. When the row counter reaches a value of 15, it is reset to 0 and the row_sel signal is set to its initial value.The col_sel output signal is generated by selecting the corresponding 16-bit value from the game matrix for the current row being displayed. The value is updated on each clock cycle.</p><ul><li>LED_score_display</li></ul><p><strong>Code.9 LED_score_display</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> **LED\_score\_display**(</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> rst\_n,</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>]score,</span><br><span class="line"></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>]LED</span><br><span class="line"></span><br><span class="line">`    `);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst\_n)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(!rst\_n)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `LED&lt;=<span class="number">8&#x27;b00000000</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">case</span>(score)</span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d0</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b00000000</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d1</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b00000001</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d2</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b00000011</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d3</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b00000111</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d4</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b00001111</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d5</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b00011111</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d6</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b00111111</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d7</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b01111111</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d8</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b11111111</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">default</span>:<span class="keyword">begin</span> LED&lt;=<span class="number">8&#x27;b00000000</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">endcase</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>endmodule</p><p>This code defines a module for a LED score display that takes an input score value and produces an 8-bit output signal that drives an eight-segment LED display. The output signal is updated on each positive edge of the input clock signal or negative edge of the reset signal.</p><p>If the reset signal is asserted, the output signal is set to 0. Otherwise, a case statement is used to set the output signal based on the input score value. The case statement checks the input score value and sets the output signal to a binary value that represents the corresponding LED display pattern. If the input score is not equal to any of the specified values, the output signal is set to 0.</p><ul><li>Seven_segment_display</li></ul><p><strong>Code.10 Seven_segment_display</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> **seven\_segment\_display**(</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> rst\_n,</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>]score,</span><br><span class="line"></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>]seven\_segment *<span class="comment">//abcdefgh*</span></span><br><span class="line"></span><br><span class="line">`    `);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst\_n)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">if</span>(!rst\_n)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `seven\_segment&lt;=<span class="number">8&#x27;b00000000</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">case</span>(score)</span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d0</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b11111100</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d1</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b01100000</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d2</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b11011010</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d3</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b11110010</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d4</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b01100110</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d5</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b10110110</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d6</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b10111110</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d7</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b11100000</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="number">8&#x27;d8</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b11111110</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">default</span>:<span class="keyword">begin</span> seven\_segment&lt;=<span class="number">8&#x27;b00000000</span>; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">endcase</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>endmodule</p><p>This code defines a module for a seven-segment LED display that takes an input score value and produces an 8-bit output signal that drives the display. The output signal is updated on each positive edge of the input clock signal or negative edge of the reset signal.</p><p>If the reset signal is asserted, the output signal is set to a binary value that turns off all the segments. Otherwise, a case statement is used to set the output signal based on the input score value. The case statement checks the input score value and sets the output signal to a binary value that represents the corresponding display pattern for the number. If the input score is not equal to any of the specified values, the output signal is set to a binary value that turns off all the segments.</p><ul><li>Game_logic</li></ul><p><strong>Code.11 Game_logic</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> **game\_logic** (</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> rst\_n,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> up,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> down,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> left,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> right,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">input</span> <span class="keyword">wire</span> shoot,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">255</span>:<span class="number">0</span>] game\_matrix,</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] score</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] plane\_position = <span class="number">8&#x27;hF7</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] bullet\_position = <span class="number">8&#x27;h00</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] enemy\_position = <span class="number">8&#x27;h00</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> shoot\_reg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>] enemy\_counter = <span class="number">16&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>] bullet\_counter = <span class="number">16&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> up\_reg=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> down\_reg=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> left\_reg=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> right\_reg=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> crash;</span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">reg</span> game\_over;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst\_n) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">if</span> (!rst\_n) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `plane\_position &lt;= <span class="number">8&#x27;hF7</span>;</span><br><span class="line"></span><br><span class="line">`            `bullet\_position &lt;= <span class="number">8&#x27;h00</span>;</span><br><span class="line"></span><br><span class="line">`            `enemy\_position &lt;= <span class="number">8&#x27;h00</span>;</span><br><span class="line"></span><br><span class="line">`            `shoot\_reg &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `up\_reg&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `game\_over&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `crash&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `down\_reg&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `left\_reg&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `right\_reg&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `enemy\_counter &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`            `bullet\_counter &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`            `game\_matrix &lt;= <span class="number">256&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">`            `score &lt;= <span class="number">8&#x27;h00</span>;</span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`       `<span class="comment">//control the movement of the plane</span></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span>(up&amp;&amp;!up\_reg)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `up\_reg&lt;=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (up &amp;&amp; plane\_position[<span class="number">7</span>:<span class="number">4</span>] &gt; <span class="number">4&#x27;b0000</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `plane\_position &lt;= plane\_position - <span class="number">8&#x27;b00100000</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (!up)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `up\_reg&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span>(down&amp;&amp;!down\_reg)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `down\_reg&lt;=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (down &amp;&amp; plane\_position[<span class="number">7</span>:<span class="number">4</span>] &lt; <span class="number">4&#x27;b1110</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `plane\_position &lt;= plane\_position + <span class="number">8&#x27;h10</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`             `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (!down)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `down\_reg&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span>(left&amp;&amp;!left\_reg)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `left\_reg&lt;=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (left &amp;&amp; plane\_position[<span class="number">3</span>:<span class="number">0</span>] &gt; <span class="number">4&#x27;b0000</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `plane\_position &lt;= plane\_position - <span class="number">8&#x27;h01</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (!left)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `left\_reg&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`             `<span class="keyword">if</span>(right&amp;&amp;!right\_reg)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `right\_reg&lt;=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (right &amp;&amp; plane\_position[<span class="number">3</span>:<span class="number">0</span>] &lt; <span class="number">4&#x27;b1110</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `plane\_position &lt;= plane\_position + <span class="number">8&#x27;h01</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`             `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (!right)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`            `right\_reg&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `End</span><br><span class="line"></span><br><span class="line">`            `<span class="comment">//control the shot of the bullet</span></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (shoot &amp;&amp; !shoot\_reg) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `shoot\_reg &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`                `bullet\_position &lt;= plane\_position - <span class="number">8&#x27;h10</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (!shoot) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `shoot\_reg &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">`            `End</span><br><span class="line"></span><br><span class="line">`            `<span class="comment">//use bullet\_counter to determine the speed</span></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (bullet\_position != <span class="number">8&#x27;h00</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `bullet\_counter &lt;= bullet\_counter + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`                `<span class="keyword">if</span> (bullet\_counter == <span class="number">16&#x27;d1</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                    `bullet\_counter &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`                    `<span class="keyword">if</span> (bullet\_position[<span class="number">7</span>:<span class="number">4</span>] != <span class="number">4&#x27;b0000</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                        `bullet\_position &lt;= bullet\_position - <span class="number">8&#x27;h10</span>;</span><br><span class="line"></span><br><span class="line">`                    `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                        `bullet\_position &lt;= <span class="number">8&#x27;h00</span>;</span><br><span class="line"></span><br><span class="line">`                    `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`                `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`            `End</span><br><span class="line"></span><br><span class="line">`            `<span class="comment">//control the movement of the enemy</span></span><br><span class="line"></span><br><span class="line">`            `<span class="comment">//use enemy\_counter to determine the speed</span></span><br><span class="line"></span><br><span class="line">`            `enemy\_counter &lt;= enemy\_counter + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (enemy\_counter == <span class="number">16&#x27;d1</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `enemy\_counter &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line">`                `<span class="keyword">if</span> (enemy\_position[<span class="number">7</span>:<span class="number">4</span>] &lt; <span class="number">4&#x27;b1110</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                    `enemy\_position &lt;= enemy\_position + <span class="number">8&#x27;h10</span>;</span><br><span class="line"></span><br><span class="line">`                `<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                  `enemy\_position &lt;= &#123;<span class="number">4&#x27;b0000</span>, enemy\_position[<span class="number">3</span>:<span class="number">0</span>]&#125; + <span class="number">8&#x27;h01</span>;</span><br><span class="line"></span><br><span class="line">`                `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`            `End</span><br><span class="line"></span><br><span class="line"><span class="comment">//determine whether the bullet hits the enemy or not</span></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (bullet\_position == enemy\_position||bullet\_position==(enemy\_position+<span class="number">8&#x27;h01</span>)) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `score &lt;= score + <span class="number">8&#x27;h01</span>;</span><br><span class="line"></span><br><span class="line">`                `enemy\_position &lt;= &#123;<span class="number">4&#x27;b0000</span>, enemy\_position[<span class="number">3</span>:<span class="number">0</span>]&#125; + <span class="number">8&#x27;h01</span>;</span><br><span class="line"></span><br><span class="line">`                `bullet\_position &lt;= <span class="number">8&#x27;h00</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span>*       </span><br><span class="line"></span><br><span class="line"><span class="comment">//determine whether the plane crash with the enemy</span></span><br><span class="line"></span><br><span class="line">crash&lt;=(plane\_position==enemy\_position)||((plane\_position-<span class="number">8&#x27;h10</span>)==enemy\_position)||((plane\_position-<span class="number">8&#x27;h01</span>)==enemy\_position)||((plane\_position+<span class="number">8&#x27;h01</span>)==enemy\_position)||(plane\_position==(enemy\_position+<span class="number">8&#x27;h01</span>))||((plane\_position-<span class="number">8&#x27;h10</span>)==(enemy\_position+<span class="number">8&#x27;h01</span>))||((plane\_position-<span class="number">8&#x27;h01</span>)==(enemy\_position+<span class="number">8&#x27;h01</span>))||((plane\_position+<span class="number">8&#x27;h01</span>)==(enemy\_position+<span class="number">8&#x27;h01</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//refresh  the game matrix</span></span><br><span class="line"></span><br><span class="line">`         `<span class="keyword">if</span>(crash)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`           `game\_matrix &lt;= <span class="number">256&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line">`           `game\_over&lt;=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`           `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`          <span class="meta">`<span class="keyword">else</span> if(game\_over==0)begin   </span></span><br><span class="line"></span><br><span class="line">`            `game\_matrix &lt;= <span class="number">256&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`            `game\_matrix[plane\_position] &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `game\_matrix[plane\_position - <span class="number">8&#x27;h10</span>] &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `game\_matrix[plane\_position - <span class="number">8&#x27;h01</span>] &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `game\_matrix[plane\_position + <span class="number">8&#x27;h01</span>] &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`            `game\_matrix[enemy\_position] &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `game\_matrix[enemy\_position+<span class="number">8&#x27;h01</span>] &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">if</span> (bullet\_position != <span class="number">8&#x27;h00</span>) <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">`                `game\_matrix[bullet\_position] &lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">`            `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`        `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">`    `<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>This code defines a module for a game logic that takes several input signals representing the player’s movements and actions, and generates two output signals: a game matrix that represents the state of the game world, and a score value that represents the player’s score. The output signals are updated on each positive edge of the input clock signal or negative edge of the reset signal.</p><p>The module contains several registers that represent the positions of the player, enemy, and bullet, as well as several flags that represent the player’s actions and the game status. The logic of the module is implemented using several if-else statements and a case statement that update the position of the player, bullet, and enemy, and check for collisions and other game events.</p><p>The output game matrix is a 256-bit binary vector that represents the state of the game world, with each bit corresponding to a pixel on the game screen. The matrix is updated on each clock cycle to reflect the current position of the player, enemy, and bullet, as well as any collisions that occur.</p><p>The output score value is an 8-bit binary number that represents the player’s score, which is incremented each time the player shoots down an enemy.</p><p>Overall, this module implements the game logic for a simple shooting game that allows the player to move their character and shoot down enemy planes, while avoiding collisions and other obstacles.</p><h1 id="Chapter-5-References"><a href="#Chapter-5-References" class="headerlink" title="Chapter 5. References"></a><a name="_toc21012"></a><strong>Chapter 5. References</strong></h1><p><strong>1.Principle of dynamic scanning</strong> </p><p><a href="https://blog.csdn.net/qq_55203246/article/details/124155818">https://blog.csdn.net/qq_55203246/article/details/124155818</a></p><p><strong>2. Electronic Design tutorial:16 *16 LED Matrix Driver</strong> </p><p><a href="https://blog.csdn.net/geek_monkey/article/details/107622595">https://blog.csdn.net/geek_monkey/article/details/107622595</a></p><p><strong>3.The Case statement in Verilog</strong></p><p><a href="https://blog.csdn.net/CLL_caicai/article/details/104395480">https://blog.csdn.net/CLL_caicai/article/details/104395480</a></p><p><strong>4.Verilog assigns a value to the array collective</strong></p><p><a href="https://blog.csdn.net/weixin/_34532284/article/details/112821125">https://blog.csdn.net/weixin\_34532284/article/details/112821125</a></p><p><strong>5.The problem of std:bad_alloc</strong></p><p><a href="https://blog.csdn.net/WhereYouSink/article/details/103299432">https://blog.csdn.net/WhereYouSink/article/details/103299432</a></p><h1 id="Chapter-6-Appendices"><a href="#Chapter-6-Appendices" class="headerlink" title="Chapter 6. Appendices"></a><a name="_toc24617"></a><strong>Chapter 6. Appendices</strong></h1><p><strong>Code.12 LED Text Display Testbench</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> **tb\_word\_display**();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> rst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> oLcdEn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> oLcdRs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span>  oLcdRw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>]  oLcdData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> oLcdRst;</span><br><span class="line"></span><br><span class="line">lab0 display(</span><br><span class="line"></span><br><span class="line"><span class="variable">.iClk</span>(clk),</span><br><span class="line"></span><br><span class="line"><span class="variable">.iRst</span>(rst),</span><br><span class="line"></span><br><span class="line"><span class="variable">.oLcdEn</span>(oLcdEn),</span><br><span class="line"></span><br><span class="line"><span class="variable">.oLcdRs</span>(oLcdRs),</span><br><span class="line"></span><br><span class="line"><span class="variable">.oLcdRw</span>(oLcdRw),</span><br><span class="line"></span><br><span class="line"><span class="variable">.oLcdData</span>(oLcdData),</span><br><span class="line"></span><br><span class="line"><span class="variable">.oLcdRst</span>(oLcdRst)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">#<span class="number">0</span> clk=<span class="number">0</span>; rst=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">2</span> rst=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> #<span class="number">1</span> clk=~clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><strong>Code.13 LED Image Display Testbench</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> **tb\_zty\_image\_display**();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> <span class="keyword">input</span>\_rst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> di;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> rw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> en;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> cs1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> cs2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> rst;</span><br><span class="line"></span><br><span class="line">namedisplay display1(</span><br><span class="line"></span><br><span class="line"><span class="variable">.clock</span>(clk),</span><br><span class="line"></span><br><span class="line"><span class="variable">.input</span>\_rst(<span class="keyword">input</span>\_rst),</span><br><span class="line"></span><br><span class="line"><span class="variable">.db</span>(db),</span><br><span class="line"></span><br><span class="line"><span class="variable">.di</span>(di),</span><br><span class="line"></span><br><span class="line"><span class="variable">.rw</span>(rw),</span><br><span class="line"></span><br><span class="line"><span class="variable">.en</span>(en),</span><br><span class="line"></span><br><span class="line"><span class="variable">.cs1</span>(cs1),</span><br><span class="line"></span><br><span class="line"><span class="variable">.cs2</span>(cs2),</span><br><span class="line"></span><br><span class="line"><span class="variable">.rst</span>(rst)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">#<span class="number">0</span> clk=<span class="number">0</span>; <span class="keyword">input</span>\_rst=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">2</span> <span class="keyword">input</span>\_rst=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> #<span class="number">1</span> clk=~clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><strong>Code.14 Aerial Combat Testbench</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> **tb**();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> rst\_n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> up;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> down;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> left;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> shoot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] row\_sel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] col\_sel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span>[<span class="number">7</span>:<span class="number">0</span>]LED;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span>[<span class="number">7</span>:<span class="number">0</span>]seven\_segment;</span><br><span class="line"></span><br><span class="line">top\_module top(</span><br><span class="line"></span><br><span class="line"><span class="variable">.clk</span>(clk),</span><br><span class="line"></span><br><span class="line"><span class="variable">.rst</span>\_n(rst\_n),</span><br><span class="line"></span><br><span class="line"><span class="variable">.up</span>(up),</span><br><span class="line"></span><br><span class="line"><span class="variable">.down</span>(down),</span><br><span class="line"></span><br><span class="line"><span class="variable">.left</span>(left),</span><br><span class="line"></span><br><span class="line"><span class="variable">.right</span>(right),</span><br><span class="line"></span><br><span class="line"><span class="variable">.shoot</span>(shoot),</span><br><span class="line"></span><br><span class="line"><span class="variable">.row</span>\_sel(row\_sel),</span><br><span class="line"></span><br><span class="line"><span class="variable">.col</span>\_sel(col\_sel),</span><br><span class="line"></span><br><span class="line"><span class="variable">.LED</span>(LED),</span><br><span class="line"></span><br><span class="line"><span class="variable">.seven</span>\_segment(seven\_segment)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">#<span class="number">0</span> rst\_n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">clk=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">left=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">up=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">right=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">down=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">shoot=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> rst\_n=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> left=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> left=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> up=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> up=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> shoot=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> shoot=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> right=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> right=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> left=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> left=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> shoot=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">40</span> shoot=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> #<span class="number">1</span> clk=~clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -Digital Circuits Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2023/03/30/Hello-World-0/"/>
      <url>/2023/03/30/Hello-World-0/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my Blog!</p>]]></content>
      
      
      <categories>
          
          <category> -Hello World! </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -First Blog! </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
